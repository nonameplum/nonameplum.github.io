<?xml version="1.0" encoding="UTF-8"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content"><channel><title>Łukasz Śliwiński</title><description>Software Developer Blog</description><link>https://nonameplum.github.io</link><language>en</language><lastBuildDate>Fri, 19 Feb 2021 12:35:28 +0000</lastBuildDate><pubDate>Fri, 19 Feb 2021 12:35:28 +0000</pubDate><ttl>250</ttl><atom:link href="https://nonameplum.github.io/feed.rss" rel="self" type="application/rss+xml"/><item><guid isPermaLink="true">https://nonameplum.github.io/posts/My%20Xcode%20themes</guid><title>Xcode theme (light &amp; dark)</title><description>My Xcode themes</description><link>https://nonameplum.github.io/posts/My%20Xcode%20themes</link><pubDate>Thu, 11 Feb 2021 13:49:00 +0000</pubDate><content:encoded><![CDATA[<h1>Xcode theme (light &amp; dark)</h1><h2>Installation</h2><h3>Manual</h3><p>Download and unzip <a href="https://github.com/nonameplum/blog/files/5965669/Plum_Xcode_Themes.zip">Plum<em>Xcode</em>Themes.zip</a> Copy <code>*.xccolortheme</code> files to <code>~/Library/Developer/Xcode/UserData/FontAndColorThemes/</code> (create the folder if doesn't exits yet)</p><h3>Bash script</h3><pre><code>mkdir ./<span class="type">Plum_Xcode_Themes</span>
curl --show-error --location https://github.<span class="property">com</span>/nonameplum/blog/files/<span class="number">5965669</span>/<span class="type">Plum_Xcode_Themes</span>.<span class="property">zip</span> | tar -xf - -<span class="type">C</span> ./<span class="type">Plum_Xcode_Themes</span>
cd ./<span class="type">Plum_Xcode_Themes</span>
mkdir ~/<span class="type">Library</span>/<span class="type">Developer</span>/<span class="type">Xcode</span>/<span class="type">UserData</span>/<span class="type">FontAndColorThemes</span>/
cp ./*.xccolortheme ~/<span class="type">Library</span>/<span class="type">Developer</span>/<span class="type">Xcode</span>/<span class="type">UserData</span>/<span class="type">FontAndColorThemes</span>/
</code></pre><h2>Light</h2><img src="https://user-images.githubusercontent.com/1753816/107644512-cf508200-6c77-11eb-8a93-4a8715c81bea.png" alt="Screenshot 2021-02-11 at 14 44 27"/><h2>Dark</h2><img src="https://user-images.githubusercontent.com/1753816/107644503-ccee2800-6c77-11eb-88fd-bbeb417544f1.png" alt="Screenshot 2021-02-11 at 14 45 04"/>]]></content:encoded></item><item><guid isPermaLink="true">https://nonameplum.github.io/posts/Thread%20safety%20dispatch_once%20Swifty%20alternative</guid><title>Dispatch once in Swift using a handy trick</title><description>Thread safety dispatch_once Swifty alternative</description><link>https://nonameplum.github.io/posts/Thread%20safety%20dispatch_once%20Swifty%20alternative</link><pubDate>Tue, 9 Feb 2021 22:00:00 +0000</pubDate><content:encoded><![CDATA[<h1>Dispatch once in Swift using a handy trick</h1><p>Switch allows to declare a type inside a function body. This ability could be handy in some situations. I found it useful to run the body of the function only once. For example we use to run only once the body of the function <a href="https://developer.apple.com/documentation/uikit/uiview/1622512-updateconstraints"><code>updateConstraints()</code></a>. In addition to that, if we use <code>static</code> variable in the inner <code>struct</code> Swift gives us thread safety for free. I have created a simple wrapper, that allows to run an action and be sure that it will be run only once, even in the concurrect scenario.</p><pre><code><span class="keyword">struct</span> Once {
    <span class="keyword">func</span> run(action: () -&gt; <span class="type">Void</span>) {
        <span class="keyword">struct</span> RunCheck {
            <span class="keyword">static var</span> didRun = <span class="keyword">false</span>
        }

        <span class="keyword">guard</span> !<span class="type">RunCheck</span>.<span class="property">didRun</span> <span class="keyword">else</span> { <span class="keyword">return</span> }

        <span class="type">RunCheck</span>.<span class="property">didRun</span> = <span class="keyword">true</span>
        action()
    }
}
</code></pre><p>Example of use:</p><pre><code><span class="keyword">let</span> once = <span class="type">Once</span>()

<span class="keyword">var</span> indexes: [<span class="type">Int</span>] = []
<span class="type">DispatchQueue</span>.<span class="call">concurrentPerform</span>(iterations: <span class="number">100</span>, execute: { index <span class="keyword">in</span>
    once.<span class="call">run</span> {
        indexes.<span class="call">append</span>(index)
    }
})

<span class="call">print</span>(indexes) <span class="comment">// It will have only one element</span>
</code></pre>]]></content:encoded></item><item><guid isPermaLink="true">https://nonameplum.github.io/posts/Tagging%20in%20swift%20documentation%20to%20link%20to%20another%20place%20in%20the%20code%20base</guid><title>Tag - Swift documentation markup</title><description>Tagging in swift documentation to link to another place in the code base</description><link>https://nonameplum.github.io/posts/Tagging%20in%20swift%20documentation%20to%20link%20to%20another%20place%20in%20the%20code%20base</link><pubDate>Thu, 4 Feb 2021 07:54:00 +0000</pubDate><content:encoded><![CDATA[<h1>Tag - Swift documentation markup</h1><p><a href="https://developer.apple.com/library/archive/documentation/Xcode/Reference/xcode_markup_formatting_ref/">Swift documentation markup</a> is not clear how to link to other type definition/method/... from the documentation. It can be done using <code>Tag</code> element.</p><pre><code><span class="comment">/// An error
/// - Tag: SomeError</span>
<span class="keyword">enum</span> SomeError: <span class="type">Error</span> {
}

<span class="comment">/// Description
/// - Throws: An error of type [SomeError](x-source-tag://SomeError) might be thrown</span>
<span class="keyword">func</span> doSomething() <span class="keyword">throws</span> {
    <span class="keyword">throw</span> <span class="type">NSError</span>(domain: <span class="string">""</span>, code: <span class="number">1</span>, userInfo: <span class="keyword">nil</span>)
}
</code></pre><p>If you do the quick help (<code>⌥ + click</code>) on the method <code>doSomething</code> the documentation will be presented with the clickable link <code>SomeError</code> that will navigate to the place where the tag is defined.</p><img src="https://user-images.githubusercontent.com/1753816/106861707-66d93200-66c6-11eb-93f5-e3bf106fa9a5.png" alt="Screenshot 2021-02-04 at 08 39 47"/>]]></content:encoded></item><item><guid isPermaLink="true">https://nonameplum.github.io/posts/Custom%20Key%20Binding%20for%20Xcode%20to%20join%20lines</guid><title>How to add join lines shortcut to Xcode</title><description>Custom Key Binding for Xcode to join lines</description><link>https://nonameplum.github.io/posts/Custom%20Key%20Binding%20for%20Xcode%20to%20join%20lines</link><pubDate>Wed, 3 Feb 2021 10:34:00 +0000</pubDate><content:encoded><![CDATA[<h1>How to add join lines shortcut to Xcode</h1><p>Add the section below to the file <code>IDETextKeyBindingSet.plist</code> that might be located at:</p><p><code>/Applications/Xcode.app/Contents/Frameworks/IDEKit.framework/Versions/A/Resources/IDETextKeyBindingSet.plist</code> depending where the Xcode app is placed and named.</p><pre><code>&lt;key&gt;<span class="type">Custom</span>&lt;/key&gt;
&lt;dict&gt;
    &lt;key&gt;<span class="type">Join Lines</span>&lt;/key&gt;
    &lt;string&gt;moveDown:, moveToEndOfText:, moveToBeginningOfText:, deleteToBeginningOfLine:, deleteBackward:&lt;/string&gt;
    &lt;key&gt;<span class="type">Join Lines Backward</span>&lt;/key&gt;
    &lt;string&gt;moveToEndOfText:, moveToBeginningOfText:, deleteToBeginningOfLine:, deleteBackward:&lt;/string&gt;
&lt;/dict&gt;
</code></pre><p><code>Join Lines</code> joins the lines forward, the other one backward.</p><p>After the file is saved, Xcode needs to be restarted to load the new setup. In Xcode settings, the keyboard shorts can be configured: <img src="https://user-images.githubusercontent.com/1753816/106734419-48fec500-6613-11eb-994e-423fc983873e.png" alt="Screenshot 2021-02-03 at 11 30 46"/></p>]]></content:encoded></item><item><guid isPermaLink="true">https://nonameplum.github.io/posts/Observe%20deinitialization</guid><title>An extension to allow observation when an object is deallocated.</title><description>Observe deinitialization</description><link>https://nonameplum.github.io/posts/Observe%20deinitialization</link><pubDate>Thu, 14 Jan 2021 10:46:00 +0000</pubDate><content:encoded><![CDATA[<h1>An extension to allow observation when an object is deallocated.</h1><pre><code><span class="comment">// MARK: Deinit observation</span>
<span class="keyword">extension</span> <span class="type">NSObject</span> {
    <span class="keyword">func</span> onDeinit(execute work: <span class="keyword">@escaping</span> () -&gt; <span class="type">Void</span>) {
        <span class="keyword">let</span> deinitCallback = <span class="type">Self</span>.<span class="call">deinitCallback</span>(forObject: <span class="keyword">self</span>)
        deinitCallback.<span class="property">callbacks</span>.<span class="call">append</span>(work)
    }

    <span class="comment">// MARK: Helpers</span>
    <span class="keyword">private static let</span> key = <span class="type">UnsafeMutablePointer</span>&lt;<span class="type">UInt8</span>&gt;.<span class="call">allocate</span>(capacity: <span class="number">1</span>)

    <span class="keyword">static private func</span> deinitCallback(forObject object: <span class="type">NSObject</span>) -&gt; <span class="type">DeinitCallback</span> {
        <span class="keyword">if let</span> deinitCallback = <span class="call">objc_getAssociatedObject</span>(object, key) <span class="keyword">as</span>? <span class="type">DeinitCallback</span> {
            <span class="keyword">return</span> deinitCallback
        } <span class="keyword">else</span> {
            <span class="keyword">let</span> deinitCallback = <span class="type">DeinitCallback</span>()
            <span class="call">objc_setAssociatedObject</span>(object, key, deinitCallback, .<span class="dotAccess">OBJC_ASSOCIATION_RETAIN_NONATOMIC</span>)
            <span class="keyword">return</span> deinitCallback
        }
    }

    <span class="comment">// MARK: Types</span>
    <span class="keyword">@objc fileprivate class</span> DeinitCallback: <span class="type">NSObject</span> {
        <span class="keyword">var</span> callbacks: [() -&gt; <span class="type">Void</span>] = []

        <span class="keyword">deinit</span> {
            callbacks.<span class="call">forEach</span>({ $0() })
        }
    }
}
</code></pre>]]></content:encoded></item></channel></rss>