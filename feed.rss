<?xml version="1.0" encoding="UTF-8"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content"><channel><title>Łukasz Śliwiński</title><description>Software Developer Blog</description><link>https://nonameplum.github.io</link><language>en</language><lastBuildDate>Tue, 12 Apr 2022 13:44:21 +0000</lastBuildDate><pubDate>Tue, 12 Apr 2022 13:44:21 +0000</pubDate><ttl>250</ttl><atom:link href="https://nonameplum.github.io/feed.rss" rel="self" type="application/rss+xml"/><item><guid isPermaLink="true">https://nonameplum.github.io/posts/SwiftUI%20custom%20localization%20strings%20handling</guid><title>How to handle localized strings from separate bundle or framework in SwiftUI</title><description>SwiftUI custom localization strings handling.</description><link>https://nonameplum.github.io/posts/SwiftUI%20custom%20localization%20strings%20handling</link><pubDate>Tue, 12 Apr 2022 13:29:00 +0000</pubDate><content:encoded><![CDATA[<h1>How to handle localized strings from separate bundle or framework in SwiftUI</h1><p>SwiftUI provides a very handy <code>LocalizedStringKey</code> that can be used to e.g. initialized the <code>Text</code> view and others. It works differently from UIKit in that regard that if the localized strings leave in some other bundle than the main one from where by default SwiftUI tries to get the localized strings you have to pass that information to the <code>Text</code> <a href="https://developer.apple.com/documentation/swiftui/text/init(_:tablename:bundle:comment:">constructor</a>), in contrast to <a href="https://developer.apple.com/documentation/foundation/1418095-nslocalizedstring"><code>NSLocalizedString</code></a>.</p><p>It is connected to the fact how SwiftUI internally handles the possibility to easily override the locale used by the view using</p><pre><code>view.<span class="call">environment</span>(\.<span class="property">locale</span>, .<span class="keyword">init</span>(identifier: <span class="string">"pl"</span>))
</code></pre><p>It is very handy, especially in the case of the SwiftUI Previews, so you can very easily see how the view will behave in all supported languages at once.</p><pre><code><span class="type">ForEach</span>(localizations, id: \.<span class="property">identifier</span>) { locale <span class="keyword">in</span>
    <span class="type">Text</span>(<span class="string">"Hello"</span>)
        .<span class="call">environment</span>(\.<span class="property">locale</span>, locale)
        .<span class="call">previewDisplayName</span>(<span class="type">Locale</span>.<span class="property">current</span>.<span class="call">localizedString</span>(forIdentifier: locale.<span class="property">identifier</span>))
}
</code></pre><p>The problem is when you would like to use <code>NSLocalizedString</code> to get the localized strings, or you have a custom implementation for the localized strings handling. Then most probably you will lose the ability to set the locale by <code>.environment(\.locale, locale)</code> on the views because it won't be respected. As the environment value is available in the <code>View</code> context. <code>Locale.current</code> stays the same across the app anyway.</p><p>To overcome that issue I came up with a solution that allows to still be able to override the locale environment and provide a custom implementation of the localized strings.</p><pre><code><span class="keyword">struct</span> LocalizedText: <span class="type">View</span> {
    <span class="keyword">@Environment</span>(\.<span class="property">locale</span>) <span class="keyword">var</span> locale
    <span class="keyword">let</span> key: <span class="type">String</span>
    <span class="keyword">let</span> localizedString: (<span class="keyword">_</span> languageCode: <span class="type">String</span>?, <span class="keyword">_</span> key: <span class="type">String</span>) -&gt; (<span class="type">String</span>)

    <span class="keyword">var</span> body: <span class="type">Text</span> {
        <span class="keyword">let</span> languageCode = locale.<span class="property">languageCode</span> ?? <span class="type">Locale</span>.<span class="property">current</span>.<span class="property">languageCode</span>
        <span class="keyword">let</span> localizedString = <span class="call">localizedString</span>(languageCode, key)

        <span class="keyword">return</span> <span class="type">Text</span>(localizedString)
    }
}
</code></pre><p><code>LocalizedText</code> view is used to get the <code>locale</code> from the <code>environment</code> as it is only available from the <code>View</code> context. This was by passing the <code>localizedString</code> closure, which gets all the information needed to resolve the localized string which is the <code>key</code> and <code>languageCode</code>.</p><p>Example of use could look like this:</p><pre><code><span class="keyword">extension</span> <span class="type">L18n</span> {
    <span class="keyword">static func</span> localizedString(<span class="keyword">_</span> key: <span class="type">String</span>, languageCode: <span class="type">String</span>) -&gt; <span class="type">String</span> {
        <span class="type">NSLocalizedString</span>(
            key,
            tableName: <span class="string">""</span>,
            bundle: <span class="call">resolveBundle</span>(for : languageCode),
            value: <span class="string">"**</span>\(key)<span class="string">**"</span>,
            comment: <span class="string">""</span>
        )
    }

    <span class="keyword">static func</span> localizedText(<span class="keyword">_</span> key: <span class="type">String</span>) -&gt; <span class="keyword">some</span> <span class="type">View</span> {
        <span class="type">LocalizedText</span>(key: key, localizedString: { languageCode, key <span class="keyword">in</span>
            <span class="call">localizedString</span>(key, languageCode: languageCode)
        })
    }
}
</code></pre><pre><code><span class="keyword">struct</span> SomeView: <span class="type">View</span> {
    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
        <span class="type">L18n</span>.<span class="call">localizedText</span>(<span class="string">"Hello"</span>)
    }
}

<span class="keyword">struct</span> SomeView_Preview: <span class="type">PreviewProvider</span> {
    <span class="keyword">static var</span> previews: <span class="keyword">some</span> <span class="type">View</span> {
        <span class="type">SomeView</span>()
            .<span class="call">environment</span>(\.<span class="property">locale</span>, <span class="type">Locale</span>(identifier: <span class="string">"pl"</span>))
    }
}
</code></pre><p>This way we keep the best of both worlds. Especially do not lose the ability of SwiftUI <a href="https://developer.apple.com/documentation/swiftui/environmentvalues"><code>EnvironmentValues</code></a> and still provide a custom implementation for the localized strings handling. We can keep <code>*.lproj</code> and <code>*.strings</code> files in a separate framework, and provide a custom implementation of the localized strings by e.g. having a complicated fallback translations business logic in case the key is missing for the asked language.</p>]]></content:encoded></item><item><guid isPermaLink="true">https://nonameplum.github.io/posts/Superview%20observer</guid><title>How to observe the moment when the view is added to the super view.</title><description>Superview observer</description><link>https://nonameplum.github.io/posts/Superview%20observer</link><pubDate>Sun, 10 Apr 2022 14:54:00 +0000</pubDate><content:encoded><![CDATA[<h1>How to observe the moment when the view is added to the super view.</h1><p>Sometimes it is useful to know when the view has added a subview to another view. For example, it is required before we can activate the autolayout constraints.</p><p>This can be achieved by observing the moment when the view is moved to the window, as in the case of the <code>UIView</code> it happens at the time when is added as a subview.</p><p>To do that we can create <code>UIView</code> subclass that will override method <a href="https://developer.apple.com/documentation/uikit/uiview/1622527-didmovetowindow">didMoveToWindow()</a>.</p><pre><code><span class="keyword">public final class</span> SuperviewObserver: <span class="type">UIView</span> {
    <span class="keyword">private let</span> observer: (<span class="keyword">_</span> this: <span class="type">UIView</span>, <span class="keyword">_</span> superview: <span class="type">UIView</span>) -&gt; <span class="type">Void</span>

    <span class="keyword">public init</span>(observer: <span class="keyword">@escaping</span> (<span class="keyword">_</span> this: <span class="type">UIView</span>, <span class="keyword">_</span> superview: <span class="type">UIView</span>) -&gt; <span class="type">Void</span>) {
        <span class="keyword">self</span>.<span class="property">observer</span> = observer
        <span class="keyword">super</span>.<span class="keyword">init</span>(frame: .<span class="dotAccess">zero</span>)
    }

    <span class="keyword">@available</span>(*, unavailable)
    <span class="keyword">required init</span>?(coder: <span class="type">NSCoder</span>) {
        <span class="call">fatalError</span>(<span class="string">"init(coder:) has not been implemented"</span>)
    }

    <span class="keyword">public override func</span> didMoveToWindow() {
        <span class="keyword">super</span>.<span class="call">didMoveToWindow</span>()
        <span class="keyword">guard let</span> superview = superview?.<span class="property">superview</span> <span class="keyword">else</span> { <span class="keyword">return</span> }

        <span class="call">observer</span>(<span class="keyword">self</span>, superview)
        <span class="call">removeFromSuperview</span>()
    }
}
</code></pre><p>We can make this custom subclass more convenient to use, by creating an extension method:</p><pre><code><span class="keyword">public protocol</span> UIViewProtocol {}
<span class="keyword">extension</span> <span class="type">UIView</span>: <span class="type">UIViewProtocol</span> {}

<span class="keyword">public extension</span> <span class="type">UIViewProtocol</span> <span class="keyword">where</span> <span class="type">Self</span>: <span class="type">UIView</span> {
    <span class="keyword">func</span> onDidMoveToSubview(closure: <span class="keyword">@escaping</span> (<span class="keyword">_</span> view: <span class="type">Self</span>, <span class="keyword">_</span> superview: <span class="type">UIView</span>) -&gt; <span class="type">Void</span>) {
        <span class="call">addSubview</span>(
            <span class="type">SuperviewObserver</span> { [<span class="keyword">unowned self</span>] this, superview <span class="keyword">in</span>
                <span class="call">closure</span>(<span class="keyword">self</span>, superview)
            }
        )
    }
}
</code></pre><p><code>UIViewProtocol</code> protocol is added, to be able to get the exact type of the <code>UIView</code>.</p><pre><code><span class="keyword">let</span> superview = <span class="type">UIView</span>()
<span class="keyword">let</span> view = <span class="type">CustomSubclass</span>()
view.<span class="call">onDidMoveToSubview</span> { this, superview <span class="keyword">in</span> 
    <span class="type">NSLayoutConstraint</span>.<span class="call">activate</span>([
        this.<span class="property">leadingAnchor</span>.<span class="call">constraint</span>(equalTo: superview.<span class="property">leadingAnchor</span>) <span class="comment">// this is type of CustomSubclass</span>
        ...
    ])
}

superview.<span class="call">addSubview</span>(view)
</code></pre>]]></content:encoded></item><item><guid isPermaLink="true">https://nonameplum.github.io/posts/Setup%20a%20linkage%20and%20package%20for%20each%20dependency%20separately%20with%20CocoaPods</guid><title>How to set up the linkage and package method separately for each dependency with CocoaPods</title><description>Setup a linkage and package for each dependency separately with CocoaPods</description><link>https://nonameplum.github.io/posts/Setup%20a%20linkage%20and%20package%20for%20each%20dependency%20separately%20with%20CocoaPods</link><pubDate>Mon, 28 Feb 2022 10:48:00 +0000</pubDate><content:encoded><![CDATA[<h1>How to set up the linkage and package method separately for each dependency with CocoaPods</h1><p>CocoaPods doesn't allow the setup of the linkage and package method separately for each dependency. It is possible to setup the linkage method but only for the whole target like:</p><pre><code>target :<span class="type">DynamicTarget</span> <span class="keyword">do</span>
    use_frameworks! :linkage =&gt; :<span class="keyword">dynamic</span>
    
    pod '<span class="type">DynamicPod</span>' # <span class="type">This</span> will be linked dynamically
end

target :<span class="type">StaticTarget</span> <span class="keyword">do</span>
    use_frameworks! :linkage =&gt; :<span class="keyword">static</span>

    pod '<span class="type">StaticPod</span>' # <span class="type">This</span> will be linked statically
end
</code></pre><p>Microsoft iOS team made a plugin to allow it: https://github.com/microsoft/cocoapods-pod-linkage</p><p>If you don't what to use the plugin you can still make it work on your own by using the CocoaPods <code>pre_install</code> hook.</p><pre><code>pre_install <span class="keyword">do</span> |installer|
  installer.<span class="property">pod_targets</span>.<span class="property">each</span> <span class="keyword">do</span> |pod|
    <span class="keyword">if</span> pod.<span class="property">name</span> == <span class="string">"Podname"</span>
      def pod.<span class="property">build_type</span>
        <span class="type">Pod</span>::<span class="type">BuildType</span>.<span class="call">new</span>(:linkage =&gt; :<span class="keyword">dynamic</span>, :packaging =&gt; :framework)
      end
    end
  end
end
</code></pre><p>All possible <code>BuildType</code>s are defined here https://github.com/CocoaPods/Core/blob/master/lib/cocoapods-core/build_type.rb.</p>]]></content:encoded></item><item><guid isPermaLink="true">https://nonameplum.github.io/posts/Unit%20Test%20Template%20for%20Xcode%20Playground</guid><title>How to add custom template useful for the Unit Test directly in the Xcode Playgroud</title><description>Unit Test Template for Xcode Playground</description><link>https://nonameplum.github.io/posts/Unit%20Test%20Template%20for%20Xcode%20Playground</link><pubDate>Sun, 5 Sep 2021 11:56:00 +0000</pubDate><content:encoded><![CDATA[<h1>How to add custom template useful for the Unit Test directly in the Xcode Playgroud</h1><p>Custom template that allows to write unit tests directly in the Xcode Playgroud with nice error/success messages: <img src="https://user-images.githubusercontent.com/1753816/132126336-c6ac9414-e57d-4394-a3cb-65d0fac46d79.png" alt="Screenshot 2021-09-05 at 14 11 30"/> <img src="https://user-images.githubusercontent.com/1753816/132126405-a568738a-75dd-4e79-9d65-5e8ef0092baf.png" alt="Screenshot 2021-09-05 at 14 14 28"/></p><h2>Installation</h2><h3>Manual</h3><p>Download and unzip <a href="https://github.com/nonameplum/blog/files/7111526/Unit.Test.xctemplate.zip">Unit Test.xctemplate.zip</a> Copy <code>Unit Test.xctemplate</code> directory to <code>~/Library/Developer/Xcode/Templates/File Templates/Playground/</code> (create the folder if doesn't exits yet)</p><h3>Bash script</h3><pre><code>mkdir ./<span class="type">Unit_Test</span>.<span class="property">xctemplate</span>
curl --show-error --location https://github.<span class="property">com</span>/nonameplum/blog/files/<span class="number">7111526</span>/<span class="type">Unit</span>.<span class="type">Test</span>.<span class="property">xctemplate</span>.<span class="property">zip</span> | tar -xf - -<span class="type">C</span> ./<span class="type">Unit_Test</span>.<span class="property">xctemplate</span>
cd ./<span class="type">Unit_Test</span>.<span class="property">xctemplate</span>
mkdir -p ~/<span class="type">Library</span>/<span class="type">Developer</span>/<span class="type">Xcode</span>/<span class="type">Templates</span>/<span class="type">File</span>\ <span class="type">Templates</span>/<span class="type">Playground</span>
cp -<span class="type">R</span> <span class="string">"./Unit Test.xctemplate"</span> ~/<span class="type">Library</span>/<span class="type">Developer</span>/<span class="type">Xcode</span>/<span class="type">Templates</span>/<span class="type">File</span>\ <span class="type">Templates</span>/<span class="type">Playground</span>
</code></pre><p>Once you restart Xcode you should be able to see the <em>Unit Test</em> template for a new playgroud: <img src="https://user-images.githubusercontent.com/1753816/132126129-744ff2e0-228d-4f24-b73d-8be984ad0abf.png" alt="Screenshot 2021-09-05 at 14 05 01"/></p>]]></content:encoded></item><item><guid isPermaLink="true">https://nonameplum.github.io/posts/ESPHome%20custom%20component%20vs%20component%20(contribution)%20development</guid><title>Difference of development between custom component and full-fledged component for ESPHome</title><description>ESPHome custom component vs component (contribution) development</description><link>https://nonameplum.github.io/posts/ESPHome%20custom%20component%20vs%20component%20(contribution)%20development</link><pubDate>Sun, 5 Sep 2021 11:12:00 +0000</pubDate><content:encoded><![CDATA[<h1>Difference of development between custom component and full-fledged component for ESPHome</h1><p>There are two approaches that can be used to develop a custom component for <a href="https://esphome.io/">ESPHome</a>: 1. A simplified version described in the ESPHome documentation (<a href="https://esphome.io/components/sensor/custom.html">Custom Sensor Compoent</a> and <a href="https://esphome.io/custom/custom_component.html">Generic Custom Component</a>) 2. Native - "full-fledged" component that you can find e.g. <a href="https://github.com/esphome/esphome/tree/dev/esphome/components">ESPHome Build-in Components</a> and its creation is described in the <a href="https://esphome.io/guides/contributing.html">Contribution Guide</a></p><p>For better communication to distinguish components, I will call the former <em>Simple</em> and the latter <em>Native</em>.</p><p>The main difference between the two is that <em>Native</em> implementation provides better reusability, as you can use <a href="https://esphome.io/components/external_components.html"><code>external_components</code></a> feature to point to the local or remote (github) location in your <code>.yaml</code> device configuration to simply use some additional components except the build-in into ESPHome. Additionally <em>Native</em> component has more advantages over the component configuration validation thanks to Python and configuration schemes.</p><p>The <em>Simple</em> component development is quite well described in the ESPHome documentation. In a nutshell, it just requires creating the <code>.h</code> + optionally <code>.cpp</code> file with the C++ (Arduino) component implementation and then the <code>yaml</code> file that registers the component so it can be used as any other ESPHome component. All that is clearly explained in the above documentation references.</p><p>In the case of the <em>Native</em> component development, this gets more tricky. The contribution guide sheds a bit of light on how to start but without many details. The most tricky part is how to properly write the <code>__init__</code> and/or<code>sensor.py</code> which defines the component, validation, and C++ code generation (more details in the contribution guide). Most of the time it requires checking other component's implementations and based on that conclude what is actually needed. It's not that hard but requires a bit of Python knowledge. The C++ part is not that much different than the <em>Simple</em> component implementation. If you already have <em>Simple</em> implementation it can be copy/pasted, add <code>namespace esphome</code>, another inner for the component, and you are good to go.</p><p>If you would like to understand better the difference between the <em>Simple</em> and <em>Native</em> component implementation take a look at my <a href="https://github.com/nonameplum/esphome_devices">repository</a>. I implemented the same sensor using both approaches. You can find the <em>Simple</em> component implementation in <a href="https://github.com/nonameplum/esphome_devices/tree/main/custom_components/mq9">custom_components/mq9</a> and <em>Native</em> in <a href="https://github.com/nonameplum/esphome_devices/tree/main/components/mq">components/mq</a>. Also, the example of how to use it is defined in <a href="https://github.com/nonameplum/esphome_devices/blob/main/mq9_test.yaml">mq9_test.yaml</a></p><p>The <em>Native</em> component is loaded thanks to the <code>external_components</code> definition in <a href="https://github.com/nonameplum/esphome_devices/blob/main/common/config_base.yaml">config_base.yaml</a>.</p><p>To switch between the <em>Native</em> and <em>Simple</em> component usage uncomment the line that defines <code>mq9_base</code> in the <a href="https://github.com/nonameplum/esphome_devices/blob/41d024326db55ef2ee7b357bd58dabdbc18f53c1/mq9_test.yaml#L18">mq9_test.yaml</a>.</p>]]></content:encoded></item><item><guid isPermaLink="true">https://nonameplum.github.io/posts/Helper%20method%20to%20execute%20an%20action%20on%20viewDidLoad%20of%20a%20UIViewController</guid><title>How to execute an action on viewDidLoad of an UIViewController</title><description>Helper method to execute an action on viewDidLoad of a UIViewController</description><link>https://nonameplum.github.io/posts/Helper%20method%20to%20execute%20an%20action%20on%20viewDidLoad%20of%20a%20UIViewController</link><pubDate>Sun, 4 Apr 2021 20:27:00 +0000</pubDate><content:encoded><![CDATA[<h1>How to execute an action on viewDidLoad of an UIViewController</h1><pre><code><span class="keyword">private var</span> onViewLoadContext: <span class="type">UInt8</span> = <span class="number">0</span>

<span class="keyword">public protocol</span> UIViewControllerOnViewLoadProtocol { }

<span class="keyword">extension</span> <span class="type">UIViewController</span>: <span class="type">UIViewControllerOnViewLoadProtocol</span> { }

<span class="keyword">private class</span> OnViewControllerViewLoadObserver&lt;T&gt;: <span class="type">NSObject</span> {
    <span class="keyword">private var</span> handlers: [(<span class="type">T</span>) -&gt; <span class="type">Void</span>]
    <span class="keyword">var</span> token: <span class="type">NSKeyValueObservation</span>?

    <span class="keyword">init</span> (<span class="keyword">_</span> handler: <span class="keyword">@escaping</span> (<span class="type">T</span>) -&gt; <span class="type">Void</span>) {
        <span class="keyword">self</span>.<span class="property">handlers</span> = [handler]
    }

    <span class="keyword">func</span> invoke(<span class="keyword">_</span> value: <span class="type">T</span>) {
        <span class="keyword">self</span>.<span class="property">handlers</span>.<span class="call">forEach</span> { handler <span class="keyword">in</span>
            <span class="call">handler</span>(value)
        }
    }

    <span class="keyword">func</span> add(handler: <span class="keyword">@escaping</span> (<span class="type">T</span>) -&gt; <span class="type">Void</span>) {
        <span class="keyword">self</span>.<span class="property">handlers</span>.<span class="call">append</span>(handler)
    }
}

<span class="keyword">public extension</span> <span class="type">UIViewControllerOnViewLoadProtocol</span> <span class="keyword">where</span> <span class="type">Self</span>: <span class="type">UIViewController</span> {
    <span class="comment">/// Add handler when view controller's view is set by the framework
    ///
    /// - Attention: Be aware of memory leak that can be caused if any reference holded by `self` is used
    /// inside the handler callback. For that purpose use the instance passed in the handler parameter.
    ///
    /// - Parameters:
    ///     - handler: Callback that will be called when UIKit will set view controller's view.
    ///     Instance passed in the handler parameter is optional because is weakified.
    ///
    /// - Tag: addOnViewLoad</span>
    <span class="keyword">func</span> addOnViewLoad(handler: <span class="keyword">@escaping</span> (<span class="type">Self</span>?) -&gt; <span class="type">Void</span>) {
        <span class="keyword">let</span> observer: <span class="type">OnViewControllerViewLoadObserver</span>&lt;<span class="type">Self</span>?&gt;
        <span class="keyword">if let</span> existingObserver = <span class="call">objc_getAssociatedObject</span>(<span class="keyword">self</span>, &amp;onViewLoadContext) <span class="keyword">as</span>? <span class="type">OnViewControllerViewLoadObserver</span>&lt;<span class="type">Self</span>?&gt; {
            observer = existingObserver
            observer.<span class="call">add</span>(handler: handler)
        } <span class="keyword">else</span> {
            observer = <span class="type">OnViewControllerViewLoadObserver</span>(handler)
            <span class="call">objc_setAssociatedObject</span>(
                <span class="keyword">self</span>,
                &amp;onViewLoadContext,
                observer,
                objc_AssociationPolicy.<span class="type">OBJC_ASSOCIATION_RETAIN_NONATOMIC</span>
            )

            observer.<span class="property">token</span> = <span class="keyword">self</span>.<span class="call">observe</span>(\.<span class="property">view</span>) { [<span class="keyword">weak</span> observer, weak <span class="keyword">self</span>] (<span class="keyword">_</span>, <span class="keyword">_</span>) <span class="keyword">in</span>
                observer?.<span class="call">invoke</span>(<span class="keyword">self</span>)
            }
        }
    }

    <span class="comment">/// Remove a handler added by [addOnViewLoad](x-source-tag://addOnViewLoad)</span>
    <span class="keyword">func</span> removeOnViewLoad() {
        <span class="call">objc_setAssociatedObject</span>(
            <span class="keyword">self</span>,
            &amp;onViewLoadContext,
            <span class="keyword">nil</span>,
            objc_AssociationPolicy.<span class="type">OBJC_ASSOCIATION_RETAIN_NONATOMIC</span>
        )
    }
}
</code></pre>]]></content:encoded></item><item><guid isPermaLink="true">https://nonameplum.github.io/posts/How%20to%20calculate%20time%20needed%20to%20animate%20by%20a%20given%20length%20according%20to%20the%20animation%20timing%20function</guid><title>How to calculate a duration that is needed to animate a view from position A to position B with a given timing function</title><description>How to calculate time needed to animate by a given length according to the animation timing function</description><link>https://nonameplum.github.io/posts/How%20to%20calculate%20time%20needed%20to%20animate%20by%20a%20given%20length%20according%20to%20the%20animation%20timing%20function</link><pubDate>Sat, 20 Feb 2021 18:08:00 +0000</pubDate><content:encoded><![CDATA[<h1>How to calculate a duration that is needed to animate a view from position A to position B with a given timing function</h1><p>A long time ago I had a problem to solve that I needed to know the exact time that will take to animate a view by x which might be in the middle of the desired position giving into account the timing function that the animation uses.</p><p>Here it is, an objective-c category:</p><pre><code><span class="comment">//  CAMediaTimingFunction+Duration.h</span>
#import &lt;<span class="type">QuartzCore</span>/<span class="type">QuartzCore</span>.<span class="property">h</span>&gt;

<span class="keyword">@interface</span> <span class="type">CAMediaTimingFunction</span> (<span class="type">Duration</span>)

- (<span class="type">NSTimeInterval</span>)timeNeededToMoveByY:(<span class="type">CGFloat</span>)yMove totalYMove:(<span class="type">CGFloat</span>)totalYMove duration:(<span class="type">NSTimeInterval</span>)duration;

<span class="keyword">@end</span>

#import <span class="string">"CAMediaTimingFunction+Duration.h"</span>

<span class="keyword">@implementation</span> <span class="type">CAMediaTimingFunction</span> (<span class="type">Duration</span>)

- (<span class="type">NSTimeInterval</span>)timeNeededToMoveBy:(<span class="type">CGFloat</span>)move totalMove:(<span class="type">CGFloat</span>)totalMove duration:(<span class="type">NSTimeInterval</span>)<span class="call">duration</span> {
    <span class="comment">// Using reference animation calculate needed time according to used timing function</span>
    <span class="type">CGFloat</span> normalizedMove = move/totalMove;

    <span class="comment">// View only just for calculation</span>
    <span class="type">UIView</span> *view = [[<span class="type">UIView</span> alloc] initWithFrame:<span class="type">CGRectMake</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>)];
    <span class="type">CALayer</span> *referenceLayer = view.<span class="property">layer</span>;
    referenceLayer.<span class="property">hidden</span> = <span class="type">YES</span>;
    referenceLayer.<span class="property">speed</span> = <span class="number">0.0</span>;
    [[<span class="type">UIApplication</span> sharedApplication].keyWindow addSubview:view];

    <span class="comment">// Reference animation to calculate time</span>
    <span class="type">CABasicAnimation</span> *basicAnimation =  [<span class="type">CABasicAnimation</span> animationWithKeyPath:<span class="string">@"frame"];</span>
    basicAnimation.<span class="property">duration</span> = <span class="number">1.0</span>;
    basicAnimation.<span class="property">timingFunction</span> = <span class="keyword">self</span>;
    basicAnimation.<span class="property">fromValue</span> = [<span class="type">NSValue</span> valueWithCGRect:<span class="type">CGRectMake</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>)];
    basicAnimation.<span class="property">toValue</span> = [<span class="type">NSValue</span> valueWithCGRect:<span class="type">CGRectMake</span>(<span class="number">100</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>)];

    [view.<span class="property">layer</span> addAnimation:basicAnimation forKey:<span class="string">@"evaluatorAnimation"];</span>

    <span class="comment">// Force to run run-loop to get the presentation layer</span>
    [[<span class="type">NSRunLoop</span> mainRunLoop] runUntilDate:[<span class="type">NSDate</span> date]];

    <span class="type">NSUInteger</span> n = <span class="number">0</span>;
    <span class="type">CGFloat</span> a = <span class="number">0.0</span>;
    <span class="type">CGFloat</span> b = <span class="number">1.0</span>;
    <span class="type">CGFloat</span> tolerance = <span class="number">0.005</span>;
    <span class="type">CGFloat</span> move = <span class="number">0.0</span>;
    <span class="type">CGFloat</span> middle = <span class="number">0.0</span>;

    <span class="comment">// Biselection algorithm</span>
    <span class="keyword">while</span> (n &lt; <span class="number">1000</span>) {
        middle = (a + b)/<span class="number">2</span>;
        referenceLayer.<span class="property">timeOffset</span> = middle;
        <span class="comment">// Refresh animation to get updated presentation layer</span>
        [[<span class="type">NSRunLoop</span> mainRunLoop] runUntilDate:[<span class="type">NSDate</span> date]];
        move = referenceLayer.<span class="property">presentationLayer</span>.<span class="property">position</span>.<span class="property">x</span> / <span class="number">100</span>;

        <span class="keyword">if</span> ((move - tolerance) &lt;= normalizedMove &amp;&amp; normalizedMove &lt;= (move + tolerance))
            <span class="keyword">break</span>;

        n += <span class="number">1</span>;
        <span class="keyword">if</span> (normalizedMove &lt; move)
            b = middle;
        <span class="keyword">else</span>
            a = middle;
    }

    [view removeFromSuperview];
    <span class="keyword">return</span> middle * duration;
}

<span class="keyword">@end</span>
</code></pre>]]></content:encoded></item><item><guid isPermaLink="true">https://nonameplum.github.io/posts/iOS%20crash%20symbolication%20script</guid><title>A script to symbolicate crash log and verify if the crash log file matches the build UUID</title><description>iOS crash symbolication script</description><link>https://nonameplum.github.io/posts/iOS%20crash%20symbolication%20script</link><pubDate>Sat, 20 Feb 2021 16:38:00 +0000</pubDate><content:encoded><![CDATA[<h1>A script to symbolicate crash log and verify if the crash log file matches the build UUID</h1><p>To get the best symbolication result, or event to get a proper symbolication of a crash log, the appropriate <code>dSYM</code> and application build is required. The <code>symbolicatecrash</code> tool allows to symbolicate a crash log that doesn't exactly match the build and <code>dSYM</code> that you would like to use. This script besides the symbolication, it also checks if the crash log UUID matches the build UUID. Just run this script on a folder with your <code>.ipa</code>, the corresponding <code>.dSYM</code>, and (1+) <code>.crash</code> files. Will output symbolicated <code>sym-*.crash</code>es for you.</p><p><a href="https://gist.github.com/nonameplum/484f6a69487f912d89428a9253a14dac/archive/0eec4ccf3822dfc8fdf447b1f08dc0dcc25999a2.zip">Download the script</a></p><pre><code>#!/bin/bash
#
# <span class="type">Fool</span>'n'<span class="type">Lazy</span>-<span class="type">Proof</span> iOS .<span class="dotAccess">crash</span> <span class="type">Symbolication</span>
#
# <span class="type">Just</span> run this script on a folder with your `.ipa`, the corresponding `.dSYM`, 
# and (<span class="number">1</span>+) `.crash` files. <span class="type">Will</span> output symbolicated `sym-*.crash`es <span class="keyword">for</span> you.
#
# <span class="type">Copyright</span> (c) <span class="number">2016</span> <span class="type">Ferran Poveda</span> (<span class="keyword">@fbeeper</span>)
# <span class="type">Provided</span> under <span class="type">MIT License</span> (<span class="type">MIT</span>): http://choosealicense.<span class="property">com</span>/licenses/mit/
#
# <span class="type">Extended</span> by <span class="type">Lukasz Sliwinski</span> to check equality of the build's <span class="type">UUID</span> with the crash logs
#

function <span class="call">checkForRequiredFileOfType</span>() 
{ 
	count=`find $1 -print -quit <span class="number">2</span>&gt; /dev/null | wc -l | awk '{print \$1}'`
	<span class="keyword">if</span> [[ $count &gt; <span class="number">0</span> ]]; then
		echo <span class="string">"Found a $1 file"</span>
	<span class="keyword">else</span>
		echo <span class="string">"Missing a $1 file! Need *.ipa + *.dSYM + *.crash files."</span>
		exit
	fi
}

function <span class="call">checkForRequiredFiles</span>()
{
	checkForRequiredFileOfType <span class="string">"*.ipa"</span>
	checkForRequiredFileOfType <span class="string">"*.dSYM"</span>
	checkForRequiredFileOfType <span class="string">"*.crash"</span>
}

# <span class="type">Define</span> location of symbolicatecrash binary (defaults to <span class="type">Xcode</span> location, but can be defined on params)
symbolicatecrash=${symbolicatecrash:-/<span class="type">Applications</span>/<span class="type">Xcode</span>.<span class="property">app</span>/<span class="type">Contents</span>/<span class="type">SharedFrameworks</span>/<span class="type">DVTFoundation</span>.<span class="property">framework</span>/<span class="type">Versions</span>/<span class="type">A</span>/<span class="type">Resources</span>/symbolicatecrash}

# <span class="type">Let</span>'s make sure you haven't forgotten any file
checkForRequiredFiles

# <span class="type">Extract</span> .<span class="dotAccess">ipa</span> and define <span class="keyword">where</span> the binary <span class="keyword">is</span> (assuming it has the same name)
ipa=`find *.ipa -print -quit`
bsdtar -xf <span class="string">"$ipa"</span> -s'|[^/]*/||'
app=`find *.app -print -quit`
app=<span class="string">"$app$/${app%.*}"</span>

dSYM=`find *.dSYM -print -quit`
uuid=`dwarfdump -u $dSYM | perl -ne 'print $1 <span class="keyword">if</span> /<span class="type">UUID</span>: (.*) \(arm64\)/s' | cut -c <span class="number">1</span>-<span class="number">42</span> | tr -d '-' | awk '{ print <span class="call">tolower</span>($0) }'`

echo <span class="string">""</span>
echo <span class="string">"Build UUDD: $uuid"</span>
echo <span class="string">""</span>

# <span class="type">Symbolicate</span> all .<span class="dotAccess">crash</span> files
export <span class="type">DEVELOPER_DIR</span>=<span class="string">"/Applications/Xcode.app/Contents/Developer"</span>
<span class="keyword">for</span> i <span class="keyword">in</span> *.crash; <span class="keyword">do

	if</span> [[ ! $i == sym* ]]; then # <span class="type">Skips</span> previous output files from this script

		build_name=`grep '{<span class="string">"app_name"</span>:' $i | perl -ne 'print $1 <span class="keyword">if</span> /{<span class="string">"app_name"</span>:<span class="string">"([^"</span>]+)<span class="string">","</span>/s' | awk '{ <span class="call">print</span>($0) }'`

		crashFileUuid=`grep --after-context=<span class="number">1000</span> <span class="string">"Binary Images:"</span> $i | grep <span class="string">"$build_name arm64"</span> | perl -ne 'print $1 <span class="keyword">if</span> /.*&lt;(.*)&gt;/s' | awk '{ <span class="call">print</span>($0) }'`

		<span class="keyword">if</span> [ <span class="string">"$uuid"</span> == <span class="string">"$crashFileUuid"</span> ]; then
			<span class="string">"$symbolicatecrash" "$i" "$app"</span> &gt; <span class="string">"sym-$i"</span>
			echo <span class="string">"✅ Symbolicated $i"</span>
		<span class="keyword">else</span>
			echo <span class="string">"❌ skipped $i (crash UUID [$crashFileUuid] do not match build's UUID: [$uuid]"</span>
		fi

	fi

done
</code></pre>]]></content:encoded></item><item><guid isPermaLink="true">https://nonameplum.github.io/posts/My%20Xcode%20themes</guid><title>Xcode theme (light &amp; dark)</title><description>My Xcode themes</description><link>https://nonameplum.github.io/posts/My%20Xcode%20themes</link><pubDate>Thu, 11 Feb 2021 13:49:00 +0000</pubDate><content:encoded><![CDATA[<h1>Xcode theme (light &amp; dark)</h1><h2>Installation</h2><h3>Manual</h3><p>Download and unzip <a href="https://github.com/nonameplum/blog/files/5965669/Plum_Xcode_Themes.zip">Plum<em>Xcode</em>Themes.zip</a> Copy <code>*.xccolortheme</code> files to <code>~/Library/Developer/Xcode/UserData/FontAndColorThemes/</code> (create the folder if doesn't exits yet)</p><h3>Bash script</h3><pre><code>mkdir ./<span class="type">Plum_Xcode_Themes</span>
curl --show-error --location https://github.<span class="property">com</span>/nonameplum/blog/files/<span class="number">5965669</span>/<span class="type">Plum_Xcode_Themes</span>.<span class="property">zip</span> | tar -xf - -<span class="type">C</span> ./<span class="type">Plum_Xcode_Themes</span>
cd ./<span class="type">Plum_Xcode_Themes</span>
mkdir ~/<span class="type">Library</span>/<span class="type">Developer</span>/<span class="type">Xcode</span>/<span class="type">UserData</span>/<span class="type">FontAndColorThemes</span>/
cp ./*.xccolortheme ~/<span class="type">Library</span>/<span class="type">Developer</span>/<span class="type">Xcode</span>/<span class="type">UserData</span>/<span class="type">FontAndColorThemes</span>/
</code></pre><h2>Light</h2><img src="https://user-images.githubusercontent.com/1753816/107644512-cf508200-6c77-11eb-8a93-4a8715c81bea.png" alt="Screenshot 2021-02-11 at 14 44 27"/><h2>Dark</h2><img src="https://user-images.githubusercontent.com/1753816/107644503-ccee2800-6c77-11eb-88fd-bbeb417544f1.png" alt="Screenshot 2021-02-11 at 14 45 04"/>]]></content:encoded></item><item><guid isPermaLink="true">https://nonameplum.github.io/posts/Thread%20safety%20dispatch_once%20Swifty%20alternative</guid><title>Dispatch once in Swift using a handy trick</title><description>Thread safety dispatch_once Swifty alternative</description><link>https://nonameplum.github.io/posts/Thread%20safety%20dispatch_once%20Swifty%20alternative</link><pubDate>Tue, 9 Feb 2021 22:00:00 +0000</pubDate><content:encoded><![CDATA[<h1>Dispatch once in Swift using a handy trick</h1><p>Switch allows to declare a type inside a function body. This ability could be handy in some situations. I found it useful to run the body of the function only once. For example we use to run only once the body of the function <a href="https://developer.apple.com/documentation/uikit/uiview/1622512-updateconstraints"><code>updateConstraints()</code></a>. In addition to that, if we use <code>static</code> variable in the inner <code>struct</code> Swift gives us thread safety for free. I have created a simple wrapper, that allows to run an action and be sure that it will be run only once, even in the concurrect scenario.</p><pre><code><span class="keyword">struct</span> Once {
    <span class="keyword">func</span> run(action: () -&gt; <span class="type">Void</span>) {
        <span class="keyword">struct</span> RunCheck {
            <span class="keyword">static var</span> didRun = <span class="keyword">false</span>
        }

        <span class="keyword">guard</span> !<span class="type">RunCheck</span>.<span class="property">didRun</span> <span class="keyword">else</span> { <span class="keyword">return</span> }

        <span class="type">RunCheck</span>.<span class="property">didRun</span> = <span class="keyword">true</span>
        action()
    }
}
</code></pre><p>Example of use:</p><pre><code><span class="keyword">let</span> once = <span class="type">Once</span>()

<span class="keyword">var</span> indexes: [<span class="type">Int</span>] = []
<span class="type">DispatchQueue</span>.<span class="call">concurrentPerform</span>(iterations: <span class="number">100</span>, execute: { index <span class="keyword">in</span>
    once.<span class="call">run</span> {
        indexes.<span class="call">append</span>(index)
    }
})

<span class="call">print</span>(indexes) <span class="comment">// It will have only one element</span>
</code></pre>]]></content:encoded></item><item><guid isPermaLink="true">https://nonameplum.github.io/posts/Tagging%20in%20swift%20documentation%20to%20link%20to%20another%20place%20in%20the%20code%20base</guid><title>Tag - Swift documentation markup</title><description>Tagging in swift documentation to link to another place in the code base</description><link>https://nonameplum.github.io/posts/Tagging%20in%20swift%20documentation%20to%20link%20to%20another%20place%20in%20the%20code%20base</link><pubDate>Thu, 4 Feb 2021 07:54:00 +0000</pubDate><content:encoded><![CDATA[<h1>Tag - Swift documentation markup</h1><p><a href="https://developer.apple.com/library/archive/documentation/Xcode/Reference/xcode_markup_formatting_ref/">Swift documentation markup</a> is not clear how to link to other type definition/method/... from the documentation. It can be done using <code>Tag</code> element.</p><pre><code><span class="comment">/// An error
/// - Tag: SomeError</span>
<span class="keyword">enum</span> SomeError: <span class="type">Error</span> {
}

<span class="comment">/// Description
/// - Throws: An error of type [SomeError](x-source-tag://SomeError) might be thrown</span>
<span class="keyword">func</span> doSomething() <span class="keyword">throws</span> {
    <span class="keyword">throw</span> <span class="type">NSError</span>(domain: <span class="string">""</span>, code: <span class="number">1</span>, userInfo: <span class="keyword">nil</span>)
}
</code></pre><p>If you do the quick help (<code>⌥ + click</code>) on the method <code>doSomething</code> the documentation will be presented with the clickable link <code>SomeError</code> that will navigate to the place where the tag is defined.</p><img src="https://user-images.githubusercontent.com/1753816/106861707-66d93200-66c6-11eb-93f5-e3bf106fa9a5.png" alt="Screenshot 2021-02-04 at 08 39 47"/>]]></content:encoded></item><item><guid isPermaLink="true">https://nonameplum.github.io/posts/Custom%20Key%20Binding%20for%20Xcode%20to%20join%20lines</guid><title>How to add join lines shortcut to Xcode</title><description>Custom Key Binding for Xcode to join lines</description><link>https://nonameplum.github.io/posts/Custom%20Key%20Binding%20for%20Xcode%20to%20join%20lines</link><pubDate>Wed, 3 Feb 2021 10:34:00 +0000</pubDate><content:encoded><![CDATA[<h1>How to add join lines shortcut to Xcode</h1><p>Add the section below to the file <code>IDETextKeyBindingSet.plist</code> that might be located at:</p><p><code>/Applications/Xcode.app/Contents/Frameworks/IDEKit.framework/Versions/A/Resources/IDETextKeyBindingSet.plist</code> depending where the Xcode app is placed and named.</p><pre><code>&lt;key&gt;<span class="type">Custom</span>&lt;/key&gt;
&lt;dict&gt;
    &lt;key&gt;<span class="type">Join Lines</span>&lt;/key&gt;
    &lt;string&gt;moveDown:, moveToEndOfText:, moveToBeginningOfText:, deleteToBeginningOfLine:, deleteBackward:&lt;/string&gt;
    &lt;key&gt;<span class="type">Join Lines Backward</span>&lt;/key&gt;
    &lt;string&gt;moveToEndOfText:, moveToBeginningOfText:, deleteToBeginningOfLine:, deleteBackward:&lt;/string&gt;
&lt;/dict&gt;
</code></pre><p><code>Join Lines</code> joins the lines forward, the other one backward.</p><p>After the file is saved, Xcode needs to be restarted to load the new setup. In Xcode settings, the keyboard shorts can be configured: <img src="https://user-images.githubusercontent.com/1753816/106734419-48fec500-6613-11eb-994e-423fc983873e.png" alt="Screenshot 2021-02-03 at 11 30 46"/></p>]]></content:encoded></item><item><guid isPermaLink="true">https://nonameplum.github.io/posts/Observe%20deinitialization</guid><title>An extension to allow observation when an object is deallocated.</title><description>Observe deinitialization</description><link>https://nonameplum.github.io/posts/Observe%20deinitialization</link><pubDate>Thu, 14 Jan 2021 10:46:00 +0000</pubDate><content:encoded><![CDATA[<h1>An extension to allow observation when an object is deallocated.</h1><pre><code><span class="comment">// MARK: Deinit observation</span>
<span class="keyword">extension</span> <span class="type">NSObject</span> {
    <span class="keyword">func</span> onDeinit(execute work: <span class="keyword">@escaping</span> () -&gt; <span class="type">Void</span>) {
        <span class="keyword">let</span> deinitCallback = <span class="type">Self</span>.<span class="call">deinitCallback</span>(forObject: <span class="keyword">self</span>)
        deinitCallback.<span class="property">callbacks</span>.<span class="call">append</span>(work)
    }

    <span class="comment">// MARK: Helpers</span>
    <span class="keyword">private static let</span> key = <span class="type">UnsafeMutablePointer</span>&lt;<span class="type">UInt8</span>&gt;.<span class="call">allocate</span>(capacity: <span class="number">1</span>)

    <span class="keyword">static private func</span> deinitCallback(forObject object: <span class="type">NSObject</span>) -&gt; <span class="type">DeinitCallback</span> {
        <span class="keyword">if let</span> deinitCallback = <span class="call">objc_getAssociatedObject</span>(object, key) <span class="keyword">as</span>? <span class="type">DeinitCallback</span> {
            <span class="keyword">return</span> deinitCallback
        } <span class="keyword">else</span> {
            <span class="keyword">let</span> deinitCallback = <span class="type">DeinitCallback</span>()
            <span class="call">objc_setAssociatedObject</span>(object, key, deinitCallback, .<span class="dotAccess">OBJC_ASSOCIATION_RETAIN_NONATOMIC</span>)
            <span class="keyword">return</span> deinitCallback
        }
    }

    <span class="comment">// MARK: Types</span>
    <span class="keyword">@objc fileprivate class</span> DeinitCallback: <span class="type">NSObject</span> {
        <span class="keyword">var</span> callbacks: [() -&gt; <span class="type">Void</span>] = []

        <span class="keyword">deinit</span> {
            callbacks.<span class="call">forEach</span>({ $0() })
        }
    }
}
</code></pre>]]></content:encoded></item></channel></rss>