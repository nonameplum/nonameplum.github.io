<?xml version="1.0" encoding="UTF-8"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content"><channel><title>Łukasz Śliwiński</title><description>Software Developer Blog</description><link>https://nonameplum.github.io</link><language>en</language><lastBuildDate>Wed, 11 May 2022 06:39:10 +0000</lastBuildDate><pubDate>Wed, 11 May 2022 06:39:10 +0000</pubDate><ttl>250</ttl><atom:link href="https://nonameplum.github.io/feed.rss" rel="self" type="application/rss+xml"/><item><guid isPermaLink="true">https://nonameplum.github.io/posts/Detecting%20a%20gate's%20gearmotor%20open/closed%20state%20without%20reed%20switch%20with%20ESP32/8266%20&amp;%20ESPHome</guid><title>How to detect a gate's gearmotor open/closed state using 24 V AC/DC accessories power-supply output with a microcontroller?</title><description>Detecting a gate's gearmotor open/closed state without reed switch with ESP32/8266 &amp; ESPHome.</description><link>https://nonameplum.github.io/posts/Detecting%20a%20gate's%20gearmotor%20open/closed%20state%20without%20reed%20switch%20with%20ESP32/8266%20&amp;%20ESPHome</link><pubDate>Sun, 8 May 2022 17:52:00 +0000</pubDate><content:encoded><![CDATA[<h1>How to detect a gate's gearmotor open/closed state using 24 V AC/DC accessories power-supply output with a microcontroller?</h1><p>Most of the gate gearmotor has 24 V AC/DC accessories power-supply output. Useful to connect signaling devices (an external lamp) which is turned on while the gate is open. I wanted to use that information to be able to know if the gate is open or closed in my home automation system. I could use reed switches as I do for the garage door opener. But the priority was to pack everything inside the gearmotor cover because it is on the outside. I wanted to use ESP32/8266 microcontroller, the main problem for me to solve was, how to convert 24 V AC/DC voltage to something that I can connect to GPIO pin, which in the case of ESP can be 0 - 3.3 V.</p><h3>Optocouplers</h3><p>I knew that optocouplers can be useful for this, but I wasn't sure how to properly make a circuit that would be false-positive protected. Fortunately, I have found an outstanding <a href="https://smartsolutions4home.com/detecting-mains-voltage-with-microcontroller/">article</a> that explains in detail exactly what I needed. I just had to adjust a bit the elements for the 24 V instead of 120/230 V. My gate gearmotor has 24 AC Voltage but the circuit should work also for the DC case. The secondary side of the optocoupler is galvanically separated from mains electricity (inside the optocoupler is LED diode). The diode lights up when the input voltage exceeds around 1.4 V (I used <a href="https://www.tme.eu/Document/cddc5416cbcd80bc288c068da5f3c02a/LTV-814S.pdf">LTV-814/PC817</a>). When the diode lights up the built-in transistor works in the active region and acts as a short circuit. When the output voltage is below 1.4 V (when the gate is closed we expect the voltage to be 0) the transistor operates in the cutoff region and acts as an open circuit. This way we get a relay behavior that can safely connect almost any microcontroller to the output.</p><p>I specifically picked the <em>LTV-814</em> bidirectional optocoupler. It has two LEDs conducting in opposite directions. It simplifies the circuit a bit because thanks to the second LED the effect on the secondary side voltage (AC) will be very similar to the use of a rectifier. The last optional thing but very useful is to add a capacitor between the Emitter and GND. It smooths out the flow which helps to protect from getting too much noise information especially when the input is switching between the 0 - 24 V. The circuit that I picked from the mentioned article:</p><img src="https://user-images.githubusercontent.com/1753816/167309743-373bdbbb-84d5-45f7-a687-ceb18e57bc89.png" alt="image"/><p>I just changed the resistors from <code>100k</code> to <code>2k</code>. Instead of using 1 resistor that could have <code>6k</code> its a good idea to use a couple of resistors in series as mentioned in the article. &gt; In this way, the power is distributed over several components instead of one. Secondly, and even more important is the maximum voltage that the resistor can take. We have done the detecting part of the AC/DC voltage from the gate gearmotor.</p><h3>Connecting the voltage detector</h3><p>Having the voltage detector, I had to connect it between the gearmotor's terminals for signaling devices and the microcontroller's GPIO. I have the CAME BXV series SDNX gearmotor. Using the manual I just had to find where are the connectors for the signaling devices. In my case, it was very easy to access, just unscrue one scrue to take off the cover, and then already on the board ⑫ the terminals ⑱ are visible. Because in my case the ESP8266 will be placed under the gearmotor cover I also could easily add another feature. Using the relay controller by the microcontroller I can short circuit for a short time that is connected to the command terminals ⓸. I already used those to be able open/close my gate from home, by using the wall-mounted momentary-action switch.</p><table><thead><tr><th>Gearmotor</th><th>Board</th></tr></thead><tbody><tr><td><img src="https://user-images.githubusercontent.com/1753816/167728071-cf9c852c-786f-4fbc-83e3-0d59d99a11f3.png" alt="gearmotor"/></td><td><img src="https://user-images.githubusercontent.com/1753816/167780539-face71bf-2da8-4358-b0d3-5334941ac36f.png" alt="board"/></td></tr></tbody></table><p>The whole circuit: <img src="https://user-images.githubusercontent.com/1753816/167780899-e1862924-3cde-4af8-8dd0-1c4328deb7d6.png" alt="circuit"/></p><p>I placed everything inside a box and it fit nicely inside the gearmotor cover:</p><table><thead><tr><th>Elements</th><th>Placement</th></tr></thead><tbody><tr><td><img src="https://user-images.githubusercontent.com/1753816/167781277-33205e2c-2e1f-4947-a9e9-aaabc7924993.jpg" alt="photo<em>circuit</em>description"/></td><td><img src="https://user-images.githubusercontent.com/1753816/167781619-1e3d07c2-9777-4a3d-bc0d-71feca63ef7b.jpg" alt="photo<em>box</em>in_cover"/></td></tr></tbody></table><h3>Programming</h3><p>Having that done, the last piece was to program the ESP8266. I used <a href="https://esphome.io/">ESPHome</a>. Basically, we have to react to the voltage detection that gives us information if the gate is open or closed (and also when the state is changing). In addition, we can open/close the gate by using the relay. There is one caveat though. We do not if the gate is fully open, and we do not know if the opening ended. At least, I couldn't find in my gearmotor easy access to such information. I could add a reed switch to detect the fully opened state, but I decided that this information is not that important for me. Knowing that I do not have precise open position feedback I implemented time-based cover opening/closing as an alternative and optional feature. The fully open state of the cover is thus always an assumed one, the current position is approximated with the time the cover has been moving in a direction.</p><p>Please see the [gate<em>base.yaml] (https://github.com/nonameplum/esphome</em>devices/blob/main/common/gate_base.yaml) file to check the full component implementation. I won't describe every detail of it. Its the best to check the code itself to grasp how it works. It might be also interesting for you to check out the <a href="https://github.com/nonameplum/esphome_devices/blob/main/gate.yaml">gate.yaml</a> file to see how to use and set up the component.</p><p>The important bit is that you can configure a few parameters used in the gate component:</p><pre><code>   # gate
  gate_duration: 19500ms
  gate_duration_int: <span class="string">"19000"</span>

  gate_close_pin: <span class="type">GPIO14</span>
  gate_close_debounce_time: 500ms

  gate_relay_pin: <span class="type">GPIO4</span>
  gate_relay_active_duration: 400ms
</code></pre><ul><li><code>gate_duration</code> and <code>gate_duration_int</code> - configures how long it takes to fully open/close the gate. In my case, it is around 19 seconds. To parameters are required because of the ESPHome limitation to pass the integer information to the component.</li><li><code>gate_close_pin</code> - configures which GPIO pin will be used to detect the voltage from the gearmotor.</li><li><code>gate_close_debounce_time</code> - configures the debounce time that can programmatically protect from false positives while the state of the voltage detection is changing. <code>500ms</code> should be a reasonable default but you can adjust as needed.</li><li><code>gate_relay_pin</code> - configures which GPIO pin will take care of sending a signal to the relay to switch it on and off to short circuit that will open/close the gate.</li><li><code>gate_relay_active_duration</code> - configures how long the relay should short circuit to start the close/open action. Probably anything between <code>250 - 500ms</code> should be fine.</li></ul><p>I have all of my IoT devices connected to the open-source home automation <a href="https://www.home-assistant.io/">Home Assistant</a>. Which allows adding many other features. I have configured push notifications to not forget to close the gate if I left it open for too long. Also, the setup is configured with HomeKit, so <code>Hey Siri, close the gate</code> works nicely and my kids have a lot of fun too while we talk to her to do our home automation :).</p><p>This is how it works in action. The first video presents the closing of the gate initiated from Home Assistant (time based percentage position is changing). The second one shows received notifications about the open/close states (the gate was controlled from a remote).</p><table><thead><tr><th>Home Assistant</th><th>Open/Close state</th></tr></thead><tbody><tr><td><a href="https://user-images.githubusercontent.com/1753816/167783107-645e669d-1273-4571-93e5-12e635c64c42.mov"><img src="https://user-images.githubusercontent.com/1753816/167782667-afb49d5b-6625-4529-8a30-60c11ac563e0.png" alt="Video 1"/></a></td><td><a href="https://user-images.githubusercontent.com/1753816/167784008-de185206-2644-4007-b107-7cc26db03212.mov"><img src="https://user-images.githubusercontent.com/1753816/167783989-ab404fa4-7066-4530-90e9-2051f48e069e.png" alt="Video 2"/></a></td></tr></tbody></table>]]></content:encoded></item><item><guid isPermaLink="true">https://nonameplum.github.io/posts/Reverse%20engineered%20%60_printHierarchy%60</guid><title>How to reverse engineer _printHierarchy</title><description>Reverse engineered `_printHierarchy`</description><link>https://nonameplum.github.io/posts/Reverse%20engineered%20%60_printHierarchy%60</link><pubDate>Tue, 3 May 2022 08:34:00 +0000</pubDate><content:encoded><![CDATA[<h1>How to reverse engineer <code>_printHierarchy</code></h1><p>I wanted to traverse the view controllers hierarchy the same way as the private method that is available on UIKit -<code>UIViewController._printHierarchy</code>.</p><p>You can run it from lldb:</p><pre><code>exp -l objc -o -- [<span class="type">UIApplication</span>.<span class="property">sharedApplication</span>.<span class="property">keyWindow</span>.<span class="property">rootViewController</span> _printHierarchy]
</code></pre><p>or using a class method</p><pre><code>exp -l objc -o -- [<span class="type">UIViewController</span> _printHierarchy]
</code></pre><p>and it should return something like:</p><pre><code>&lt;<span class="type">UITabBarController</span> 0x12c01d200&gt;, state: appeared, view: &lt;<span class="type">UILayoutContainerView</span> 0x129e07b40&gt;
   | &lt;<span class="type">UINavigationController</span> 0x12a808200&gt;, state: appeared, view: &lt;<span class="type">UILayoutContainerView</span> 0x129b10880&gt;
   |    | &lt;<span class="type">App</span>.<span class="type">ViewController</span> 0x129b04620&gt;, state: disappeared, view: (view not loaded)
   |    | &lt;<span class="type">App</span>.<span class="type">ViewController</span> 0x129b049c0&gt;, state: disappeared, view: &lt;<span class="type">UIView</span> 0x129b27620&gt; not <span class="keyword">in</span> the window
   |    | &lt;<span class="type">App</span>.<span class="type">ViewController</span> 0x129f06550&gt;, state: disappeared, view: &lt;<span class="type">UIView</span> 0x129f0b7c0&gt; not <span class="keyword">in</span> the window
   |    | &lt;<span class="type">App</span>.<span class="type">ViewController</span> 0x129b24540&gt;, state: appeared, view: &lt;<span class="type">UIView</span> 0x129b2b750&gt;
   | &lt;<span class="type">UINavigationController</span> 0x12b80a000&gt;, state: disappeared, view: &lt;<span class="type">UILayoutContainerView</span> 0x12d0052c0&gt; not <span class="keyword">in</span> the window
   |    | &lt;<span class="type">App</span>.<span class="type">ViewController</span> 0x129c07220&gt;, state: disappeared, view: (view not loaded)
   |    | &lt;<span class="type">App</span>.<span class="type">ViewController</span> 0x129c075c0&gt;, state: disappeared, view: &lt;<span class="type">UIView</span> 0x129e0c730&gt; not <span class="keyword">in</span> the window
   |    | &lt;<span class="type">App</span>.<span class="type">ViewController</span> 0x12d204900&gt;, state: disappeared, view: &lt;<span class="type">UIView</span> 0x129e11550&gt; not <span class="keyword">in</span> the window
   |    | &lt;<span class="type">App</span>.<span class="type">ViewController</span> 0x12d204ca0&gt;, state: disappeared, view: &lt;<span class="type">UIView</span> 0x129b16200&gt; not <span class="keyword">in</span> the window
   + &lt;<span class="type">App</span>.<span class="type">ViewController</span> 0x12d2065e0&gt;, state: appeared, view: &lt;<span class="type">UIView</span> 0x129b26a90&gt;, presented with: &lt;<span class="type">_UIPageSheetPresentationController</span> 0x12d205aa0&gt;
   |    + &lt;<span class="type">App</span>.<span class="type">ViewController</span> 0x129b4b130&gt;, state: appeared, view: &lt;<span class="type">UIView</span> 0x129b4b4d0&gt;, presented with: &lt;<span class="type">_UIPageSheetPresentationController</span> 0x129b4b7f0&gt;
   |    |    + &lt;<span class="type">App</span>.<span class="type">ViewController</span> 0x129e2ada0&gt;, state: appeared, view: &lt;<span class="type">UIView</span> 0x129e25950&gt;, presented with: &lt;<span class="type">_UIPageSheetPresentationController</span> 0x129e27ec0&gt;
</code></pre><p>I have found a few existing solutions that for example use the <code>UIResponder</code> chain to traverse the hierarchy like <a href="https://dmytro-anokhin.medium.com/exploring-view-hierarchy-332ea63262e9">this one</a>. But the problem with <code>UIResponder.next</code> is that it won't traverse all of the controllers if there is a branch of more than one <code>UIViewController</code> stack like you might have with e.g. <code>UITabViewController</code> and modally presented view controllers. <code>UIResponder.next</code> traverses bottom-up the view hierarchy but only from the specific leaf.</p><p>I thought, that why not reverse engineer the original <code>_printHierarchy</code> method, to check all of the quirks of its internal implementation and understand how Apple engineers traverse the view controllers hierarchy top-down. It turned out to be quite straightforward after using <a href="https://www.hopperapp.com/">Hopper Disassembler app</a>. The <code>_printHierachy</code> core method is actually implemented in <code>_appendDescription</code>. On UIKit 15.0 with disassembled <code>UIKitCore</code> using x86_64 which is a bit more readable than ARM64.</p><pre><code>function <span class="call">_appendDescription</span> {
    stack[-<span class="number">200</span>] = rcx;
    r14 = rdx;
    r12 = [rdi retain];
    rbx = [rsi retain];
    <span class="keyword">if</span> ([rbx length] != 0x0) {
            [rbx appendString:<span class="string">@"\n"];</span>
    }
    stack[-<span class="number">208</span>] = rbx;
    rax = [r12 _parentViewController];
    rax = [rax retain];
    stack[-<span class="number">188</span>] = r14 &amp; 0xff;
    stack[-<span class="number">216</span>] = r12;
    <span class="keyword">if</span> (rax != 0x0) {
            [rax release];
            r15 = stack[-<span class="number">208</span>];
            <span class="keyword">if</span> (stack[-<span class="number">200</span>] != 0x0) {
                    r12 = <span class="call">sign_extend_64</span>(stack[-<span class="number">200</span>]);
                    rbx = 0x1;
                    <span class="keyword">do</span> {
                            [r15 appendString:<span class="string">@"   | "];</span>
                            rbx = rbx + 0x1;
                    } <span class="keyword">while</span> (rbx &lt;= r12);
            }
            r13 = stack[-<span class="number">216</span>];
            rax = -[<span class="type">UIViewController</span> _descriptionForPrintingHierarchyIncludingInsets:](r13, stack[-<span class="number">188</span>]);
            rax = [rax retain];
            rbx = rax;
            [r15 appendString:rax];
    }
    <span class="keyword">else</span> {
            <span class="keyword">if</span> ([r12 _isRootViewController] != 0x0) {
                    r15 = stack[-<span class="number">208</span>];
                    <span class="keyword">if</span> (stack[-<span class="number">200</span>] != 0x0) {
                            r12 = <span class="call">sign_extend_64</span>(stack[-<span class="number">200</span>]);
                            rbx = 0x1;
                            <span class="keyword">do</span> {
                                    [r15 appendString:<span class="string">@"   | "];</span>
                                    rbx = rbx + 0x1;
                            } <span class="keyword">while</span> (rbx &lt;= r12);
                    }
                    r13 = stack[-<span class="number">216</span>];
                    rax = -[<span class="type">UIViewController</span> _descriptionForPrintingHierarchyIncludingInsets:](r13, stack[-<span class="number">188</span>]);
                    rax = [rax retain];
                    rbx = rax;
                    [r15 appendString:rax];
            }
            <span class="keyword">else</span> {
                    r12 = stack[-<span class="number">208</span>];
                    <span class="keyword">if</span> (stack[-<span class="number">200</span>] &gt;= 0x2) {
                            rbx = <span class="call">sign_extend_64</span>(stack[-<span class="number">200</span>]) - 0x1;
                            <span class="keyword">do</span> {
                                    [r12 appendString:<span class="string">@"   | "];</span>
                                    rbx = rbx - 0x1;
                            } <span class="keyword">while</span> (rbx != 0x0);
                    }
                    [r12 appendString:<span class="string">@"   + "];</span>
                    r15 = [-[<span class="type">UIViewController</span> _descriptionForPrintingHierarchyIncludingInsets:](stack[-<span class="number">216</span>], stack[-<span class="number">188</span>]) retain];
                    rax = [stack[-<span class="number">216</span>] presentingViewController];
                    rax = [rax retain];
                    stack[-<span class="number">248</span>] = rax;
                    rax = [rax _presentationController];
                    rax = [rax retain];
                    stack[-<span class="number">240</span>] = rax;
                    rax = [rax _descriptionForPrintingViewControllerHierarchy];
                    rax = [rax retain];
                    stack[-<span class="number">224</span>] = rax;
                    rax = [<span class="type">NSMutableString</span> stringWithFormat:<span class="string">@"%@, presented with: %@", r15, rax];</span>
                    rax = [rax retain];
                    r13 = stack[-<span class="number">216</span>];
                    [r12 appendString:rax];
                    rbx = r15;
                    [rax release];
                    [stack[-<span class="number">224</span>] release];
                    [stack[-<span class="number">240</span>] release];
                    [stack[-<span class="number">248</span>] release];
            }
    }
    [rbx release];
    *(int128_t *)(&amp;stack[-<span class="number">312</span>] + 0x30) = <span class="call">intrinsic_movaps</span>(*(int128_t *)(&amp;stack[-<span class="number">312</span>] + 0x30), 0x0);
    *(int128_t *)(&amp;stack[-<span class="number">312</span>] + 0x20) = <span class="call">intrinsic_movaps</span>(*(int128_t *)(&amp;stack[-<span class="number">312</span>] + 0x20), 0x0);
    *(int128_t *)(&amp;stack[-<span class="number">312</span>] + 0x10) = <span class="call">intrinsic_movaps</span>(*(int128_t *)(&amp;stack[-<span class="number">312</span>] + 0x10), 0x0);
    *(int128_t *)&amp;stack[-<span class="number">312</span>] = <span class="call">intrinsic_movaps</span>(*(int128_t *)&amp;stack[-<span class="number">312</span>], 0x0);
    rax = [r13 childViewControllers];
    rax = [rax retain];
    rbx = rax;
    rcx = &amp;stack[-<span class="number">184</span>];
    rdx = &amp;stack[-<span class="number">312</span>];
    rax = [rax countByEnumeratingWithState:rdx objects:rcx count:0x10];
    <span class="keyword">if</span> (rax != 0x0) {
            r13 = rax;
            r12 = **(&amp;stack[-<span class="number">312</span>] + 0x10);
            r15 = stack[-<span class="number">200</span>] + 0x1;
            <span class="keyword">do</span> {
                    r14 = 0x0;
                    <span class="keyword">do</span> {
                            <span class="keyword">if</span> (*stack[-<span class="number">296</span>] != r12) {
                                    <span class="call">objc_enumerationMutation</span>(rbx);
                            }
                            <span class="call">_appendDescription</span>(*(stack[-<span class="number">304</span>] + r14 * 0x8), stack[-<span class="number">208</span>], stack[-<span class="number">188</span>], r15, 0x10);
                            r14 = r14 + 0x1;
                    } <span class="keyword">while</span> (r13 != r14);
                    rdx = &amp;stack[-<span class="number">312</span>];
                    rcx = &amp;stack[-<span class="number">184</span>];
                    rax = [rbx countByEnumeratingWithState:rdx objects:rcx count:0x10];
                    r13 = rax;
            } <span class="keyword">while</span> (rax != 0x0);
    }
    [rbx release];
    r14 = stack[-<span class="number">216</span>];
    rsi = <span class="keyword">@selector</span>(childModalViewController);
    rax = (*_objc_msgSend)(r14, rsi);
    rax = [rax retain];
    [rax release];
    rbx = stack[-<span class="number">208</span>];
    <span class="keyword">if</span> (rax != 0x0) {
            rax = [r14 childModalViewController];
            rax = [rax retain];
            rcx = stack[-<span class="number">200</span>] + 0x1;
            rsi = rbx;
            rdx = stack[-<span class="number">188</span>];
            <span class="call">_appendDescription</span>(rax, rsi, rdx, rcx);
            [rax release];
    }
    stack[-<span class="number">56</span>] = **___stack_chk_guard;
    [rbx release];
    [r14 release];
    rax = *___stack_chk_guard;
    rax = *rax;
    <span class="keyword">if</span> (rax != stack[-<span class="number">56</span>]) {
            rax = <span class="call">__stack_chk_fail</span>();
    }
    <span class="keyword">return</span> rax;
}
</code></pre><p>There are few <code>if</code> statements that split the code, but they are mostly used to properly append to the print indentation, like <code>"   | "</code> and <code>"   + "</code>. Overall if you forget about the lines generated by the assembly code (e.g. registry assignments) and <em>ARC</em> (e.g. <code>[rax retain]</code>, <code>[r14 release]</code>) the code is quite short and simple. Inside <code>if</code> statements blocks you can find the <code>while/repeat</code> loops that add the indentation required depending on the view hierarchy tree.</p><p>I transferred the code into <em>Swift</em> and this is what I got:</p><pre><code><span class="keyword">extension</span> <span class="type">UIViewController</span> {
    <span class="keyword">public func</span> printHierarchy() {
        <span class="keyword">var</span> prints: [<span class="type">String</span>] = []
        <span class="keyword">self</span>.<span class="call">appendDescription</span>(output: &amp;prints, deep: <span class="number">0</span>)

        <span class="keyword">let</span> printString = prints.<span class="call">reduce</span>(<span class="string">""</span>) { partialResult, elem <span class="keyword">in
            return</span> partialResult.<span class="call">appending</span>(elem)
        }

        <span class="call">print</span>(printString)
    }

    <span class="keyword">private func</span> appendDescription(output: <span class="keyword">inout</span> [<span class="type">String</span>], deep: <span class="type">Int</span>) {
        <span class="keyword">if</span> !output.<span class="property">isEmpty</span> {
            output.<span class="call">append</span>(<span class="string">"\n"</span>)
        }

        <span class="keyword">if self</span>.<span class="property">parent</span> != <span class="keyword">nil</span> {
            <span class="keyword">var</span> i = <span class="number">0</span>
            <span class="keyword">while</span> i &lt; <span class="call">deep</span> {
                output.<span class="call">append</span>(<span class="string">"   | "</span>)
                i += <span class="number">1</span>
            }
            output.<span class="call">append</span>(<span class="keyword">self</span>.<span class="property">description</span>)
        } <span class="keyword">else</span> {
            <span class="keyword">if self</span>.<span class="property">isRootViewController</span> {
                <span class="keyword">var</span> i = <span class="number">1</span>
                <span class="keyword">while</span> i &lt; <span class="call">deep</span> {
                    output.<span class="call">append</span>(<span class="string">"   | "</span>)
                    output.<span class="call">append</span>(<span class="keyword">self</span>.<span class="property">description</span>)
                    i += <span class="number">1</span>
                }
                output.<span class="call">append</span>(<span class="keyword">self</span>.<span class="property">description</span>)
            } <span class="keyword">else</span> {
                <span class="keyword">if</span> deep &gt;= <span class="number">2</span> {
                    <span class="keyword">var</span> i = deep - <span class="number">1</span>
                    <span class="keyword">repeat</span> {
                        output.<span class="call">append</span>(<span class="string">"   | "</span>)
                        i -= <span class="number">1</span>
                    } <span class="keyword">while</span> i != <span class="number">0</span>
                }
                output.<span class="call">append</span>(<span class="string">"   + "</span>)
                output.<span class="call">append</span>(<span class="keyword">self</span>.<span class="property">description</span>)
                output.<span class="call">append</span>(<span class="string">", presented with:</span> \(<span class="keyword">self</span>.<span class="property">presentationController</span>?.<span class="property">description</span> ?? "N/<span class="type">A"</span>)<span class="string">"</span>)
            }
        }

        <span class="keyword">if</span> !<span class="keyword">self</span>.<span class="property">children</span>.<span class="property">isEmpty</span> {
            <span class="keyword">var</span> i = <span class="number">0</span>
            <span class="keyword">while</span> i &lt; <span class="keyword">self</span>.<span class="property">children</span>.<span class="call">count</span> {
                <span class="keyword">self</span>.<span class="property">children</span>[i].<span class="call">appendDescription</span>(output: &amp;output, deep: deep + <span class="number">1</span>)
                i += <span class="number">1</span>
            }
        }

        <span class="keyword">if let</span> childModalVC = <span class="keyword">self</span>.<span class="property">childModalViewController</span> {
            childModalVC.<span class="call">appendDescription</span>(output: &amp;output, deep: deep + <span class="number">1</span>)
        }
    }
}

<span class="keyword">extension</span> <span class="type">UIViewController</span> {
    <span class="keyword">var</span> isRootViewController: <span class="type">Bool</span> {
        <span class="type">UIApplication</span>.<span class="property">shared</span>.<span class="property">windows</span>.<span class="call">compactMap</span>(\.<span class="property">rootViewController</span>).<span class="call">contains</span>(<span class="keyword">self</span>)
    }

    <span class="keyword">var</span> childModalViewController: <span class="type">UIViewController</span>? {
        <span class="keyword">if self</span>.<span class="property">presentedViewController</span>?.<span class="property">presentingViewController</span> == <span class="keyword">self</span> {
            <span class="keyword">return self</span>.<span class="property">presentedViewController</span>
        } <span class="keyword">else</span> {
            <span class="keyword">return nil</span>
        }
    }
}
</code></pre><p>I intentionally left the <code>while/repeat</code> loops to make the comparison with disassembled method easier. I had to reimplement the <code>isRootViewController</code> and <code>childModalViewController</code> that is used in the original implementation and it is not avaiable in the public methods of UIKit API. <code>appendDescription</code> goes recursively trought child and child modal view controllers. What I learned from this, is that Apple engenieers smartly do not check for the specific <code>UIViewController</code> subclasses to verify if there are sub view controllers like you can do with <code>UINavigationController.viewControllers</code>. They just check if there are child/modal view controllers, and recursively visit all of them. The ouput of my reimplemented <em>Swift</em> <code>printHierarchy</code> looks the same beside slight differences of the <code>UIViewControllers</code> descriptions, as again there is custom implementation used internally like <code>_descriptionForPrintingHierarchyIncludingInsets</code>.</p><h3>Reimplemented</h3><pre><code>&lt;<span class="type">UITabBarController</span>: 0x12c01d200&gt;
   | &lt;<span class="type">UINavigationController</span>: 0x12a808200&gt;
   |    | &lt;<span class="type">App</span>.<span class="type">ViewController</span>: 0x129b04620&gt;
   |    | &lt;<span class="type">App</span>.<span class="type">ViewController</span>: 0x129b049c0&gt;
   |    | &lt;<span class="type">App</span>.<span class="type">ViewController</span>: 0x129f06550&gt;
   |    | &lt;<span class="type">App</span>.<span class="type">ViewController</span>: 0x129b24540&gt;
   | &lt;<span class="type">UINavigationController</span>: 0x12b80a000&gt;
   |    | &lt;<span class="type">App</span>.<span class="type">ViewController</span>: 0x129c07220&gt;
   |    | &lt;<span class="type">App</span>.<span class="type">ViewController</span>: 0x129c075c0&gt;
   |    | &lt;<span class="type">App</span>.<span class="type">ViewController</span>: 0x12d204900&gt;
   |    | &lt;<span class="type">App</span>.<span class="type">ViewController</span>: 0x12d204ca0&gt;
   + &lt;<span class="type">App</span>.<span class="type">ViewController</span>: 0x12d2065e0&gt;, presented with: &lt;<span class="type">_UIPageSheetPresentationController</span>: 0x12d205aa0&gt;
   |    + &lt;<span class="type">App</span>.<span class="type">ViewController</span>: 0x129b4b130&gt;, presented with: &lt;<span class="type">_UIPageSheetPresentationController</span>: 0x129b4b7f0&gt;
   |    |    + &lt;<span class="type">App</span>.<span class="type">ViewController</span>: 0x129e2ada0&gt;, presented with: &lt;<span class="type">_UIPageSheetPresentationController</span>: 0x129e27ec0&gt;
</code></pre><h3>Original</h3><pre><code>&lt;<span class="type">UITabBarController</span> 0x12c01d200&gt;, state: appeared, view: &lt;<span class="type">UILayoutContainerView</span> 0x129e07b40&gt;
   | &lt;<span class="type">UINavigationController</span> 0x12a808200&gt;, state: appeared, view: &lt;<span class="type">UILayoutContainerView</span> 0x129b10880&gt;
   |    | &lt;<span class="type">App</span>.<span class="type">ViewController</span> 0x129b04620&gt;, state: disappeared, view: (view not loaded)
   |    | &lt;<span class="type">App</span>.<span class="type">ViewController</span> 0x129b049c0&gt;, state: disappeared, view: &lt;<span class="type">UIView</span> 0x129b27620&gt; not <span class="keyword">in</span> the window
   |    | &lt;<span class="type">App</span>.<span class="type">ViewController</span> 0x129f06550&gt;, state: disappeared, view: &lt;<span class="type">UIView</span> 0x129f0b7c0&gt; not <span class="keyword">in</span> the window
   |    | &lt;<span class="type">App</span>.<span class="type">ViewController</span> 0x129b24540&gt;, state: appeared, view: &lt;<span class="type">UIView</span> 0x129b2b750&gt;
   | &lt;<span class="type">UINavigationController</span> 0x12b80a000&gt;, state: disappeared, view: &lt;<span class="type">UILayoutContainerView</span> 0x12d0052c0&gt; not <span class="keyword">in</span> the window
   |    | &lt;<span class="type">App</span>.<span class="type">ViewController</span> 0x129c07220&gt;, state: disappeared, view: (view not loaded)
   |    | &lt;<span class="type">App</span>.<span class="type">ViewController</span> 0x129c075c0&gt;, state: disappeared, view: &lt;<span class="type">UIView</span> 0x129e0c730&gt; not <span class="keyword">in</span> the window
   |    | &lt;<span class="type">App</span>.<span class="type">ViewController</span> 0x12d204900&gt;, state: disappeared, view: &lt;<span class="type">UIView</span> 0x129e11550&gt; not <span class="keyword">in</span> the window
   |    | &lt;<span class="type">App</span>.<span class="type">ViewController</span> 0x12d204ca0&gt;, state: disappeared, view: &lt;<span class="type">UIView</span> 0x129b16200&gt; not <span class="keyword">in</span> the window
   + &lt;<span class="type">App</span>.<span class="type">ViewController</span> 0x12d2065e0&gt;, state: appeared, view: &lt;<span class="type">UIView</span> 0x129b26a90&gt;, presented with: &lt;<span class="type">_UIPageSheetPresentationController</span> 0x12d205aa0&gt;
   |    + &lt;<span class="type">App</span>.<span class="type">ViewController</span> 0x129b4b130&gt;, state: appeared, view: &lt;<span class="type">UIView</span> 0x129b4b4d0&gt;, presented with: &lt;<span class="type">_UIPageSheetPresentationController</span> 0x129b4b7f0&gt;
   |    |    + &lt;<span class="type">App</span>.<span class="type">ViewController</span> 0x129e2ada0&gt;, state: appeared, view: &lt;<span class="type">UIView</span> 0x129e25950&gt;, presented with: &lt;<span class="type">_UIPageSheetPresentationController</span> 0x129e27ec0&gt;
</code></pre>]]></content:encoded></item><item><guid isPermaLink="true">https://nonameplum.github.io/posts/Unit%20tests%20with%20several%20localizations</guid><title>How to make unit tests with several localizations</title><description>Unit tests with several localizations</description><link>https://nonameplum.github.io/posts/Unit%20tests%20with%20several%20localizations</link><pubDate>Wed, 27 Apr 2022 17:38:00 +0000</pubDate><content:encoded><![CDATA[<h1>How to make unit tests with several localizations</h1><p>Since Xcode 11 there is a possibility to configure different locales for unit tests by using <a href="https://developer.apple.com/videos/play/wwdc2019/413/">Test Plans</a>. It is fine, but a little bit cumbersome as requires the Xcode-specific configuration. Another way of making it work is the old-school method swizzling. It is quite simple to do and does its job with quite nice flexibility. It doesn't require any Xcode setup, works well with SPM too. The idea could be also extended to customize not only the <a href="https://developer.apple.com/documentation/foundation/locale"><code>Locale</code></a>, but also e.g. <a href="https://developer.apple.com/documentation/foundation/locale/2293155-preferredlanguages"><code>preferredlanguages</code></a>. The key point is that we can do it by exchanging the methods on <code>NSLocale</code> instead of <code>Locale</code> which still is used as a wrapper over <a href="https://github.com/apple/swift-corelibs-foundation/blob/bfead15ba7a547a8e2ea79dfd8be97de1153245d/Sources/Foundation/Locale.swift">the objective-c predecessor</a>.</p><p>We can use <code>method_setImplementation</code> and <a href="https://apple-swift.readthedocs.io/en/latest/SIL.html"><code>@convention(block)</code></a> (<a href="https://docs.swift.org/swift-book/ReferenceManual/Attributes.html">swift documentation</a>) in this case, which makes it a little bit more ergonomic than defining the <code>@objc</code> method that would solve the purpose of the exchanged method.</p><pre><code><span class="keyword">extension</span> <span class="type">XCTestCase</span> {
   <span class="keyword">func</span> setLocale(identifier: <span class="type">String</span>, preferredLanguages: [<span class="type">String</span>]) {
        <span class="keyword">let</span> currentlLocale: <span class="keyword">@convention</span>(block) (<span class="type">AnyObject</span>)
            -&gt; <span class="type">AnyObject</span> = { (_: <span class="type">AnyObject</span>!) -&gt; <span class="type">NSLocale</span> <span class="keyword">in
                return</span> <span class="type">NSLocale</span>(localeIdentifier: identifier)
            }

        <span class="call">method_setImplementation</span>(
            <span class="call">class_getClassMethod</span>(<span class="type">NSLocale</span>.<span class="keyword">self</span>, #selector(getter: <span class="type">NSLocale</span>.<span class="property">current</span>))!,
            <span class="call">imp_implementationWithBlock</span>(currentlLocale)
        )

        <span class="keyword">let</span> preferredLanguages: <span class="keyword">@convention</span>(block) (<span class="type">AnyObject</span>)
            -&gt; [<span class="type">String</span>] = { (_: <span class="type">AnyObject</span>!) -&gt; [<span class="type">String</span>] <span class="keyword">in
                return</span> preferredLanguages
            }

        <span class="call">method_setImplementation</span>(
            <span class="call">class_getClassMethod</span>(<span class="type">NSLocale</span>.<span class="keyword">self</span>, #selector(getter: <span class="type">NSLocale</span>.<span class="property">preferredLanguages</span>))!,
            <span class="call">imp_implementationWithBlock</span>(preferredLanguages)
        )
    }
}
</code></pre><p>Having that we can easily change the <code>Locale</code> for each test. The only downside is that you still use singleton <code>Locale.current</code>, so running tests in parallel will not work reliably.</p><pre><code><span class="keyword">class</span> Test: <span class="type">XCTestCase</span> {
    <span class="keyword">func</span> test_locale() {
        <span class="call">setLocale</span>(identifier: <span class="string">"fr"</span>, preferredLanguages: [<span class="string">"fr"</span>, <span class="string">"de"</span>, <span class="string">"pl"</span>])

        <span class="call">XCTAssertEqual</span>(<span class="type">Locale</span>.<span class="property">current</span>, .<span class="keyword">init</span>(identifier: <span class="string">"fr"</span>))
        <span class="call">XCTAssertEqual</span>(<span class="type">Locale</span>.<span class="property">preferredLanguages</span>, [<span class="string">"fr"</span>, <span class="string">"de"</span>, <span class="string">"pl"</span>])
    }
}
</code></pre>]]></content:encoded></item><item><guid isPermaLink="true">https://nonameplum.github.io/posts/SwiftUI%20custom%20localization%20strings%20handling</guid><title>How to handle localized strings from a separate bundle or framework in SwiftUI</title><description>SwiftUI custom localization strings handling.</description><link>https://nonameplum.github.io/posts/SwiftUI%20custom%20localization%20strings%20handling</link><pubDate>Tue, 12 Apr 2022 13:29:00 +0000</pubDate><content:encoded><![CDATA[<h1>How to handle localized strings from a separate bundle or framework in SwiftUI</h1><p>SwiftUI provides <a href="https://developer.apple.com/documentation/swiftui/localizedstringkey"><code>LocalizedStringKey</code></a> that can be used to initialize several <code>View</code> types, such as <code>Text</code>, <code>Toggle</code>, and others. It works differently from UIKit in that regard, as if the localized strings leave in some other bundle than the main one from where by default SwiftUI tries to get the values, you have to pass that information to the <code>Text</code> <a href="https://developer.apple.com/documentation/swiftui/text/init(_:tablename:bundle:comment:">constructor</a>) (not to <code>LocalizedStringKey</code>), in contrast to <a href="https://developer.apple.com/documentation/foundation/1418095-nslocalizedstring"><code>NSLocalizedString</code></a>.</p><p>It is connected to the fact that SwiftUI internally handles the possibility to easily override the locale used by the view.</p><pre><code>view.<span class="call">environment</span>(\.<span class="property">locale</span>, .<span class="keyword">init</span>(identifier: <span class="string">"pl"</span>))
</code></pre><p>It is very handy, especially in the case of the SwiftUI Previews.</p><pre><code><span class="type">ForEach</span>(localizations, id: \.<span class="property">identifier</span>) { locale <span class="keyword">in</span>
    <span class="type">Text</span>(<span class="string">"Hello"</span>)
        .<span class="call">environment</span>(\.<span class="property">locale</span>, locale)
        .<span class="call">previewDisplayName</span>(<span class="type">Locale</span>.<span class="property">current</span>.<span class="call">localizedString</span>(forIdentifier: locale.<span class="property">identifier</span>))
}
</code></pre><p>The problem is when you would like to use <code>NSLocalizedString</code>, or you have a custom implementation for the localized strings handling. Then most probably you will lose the ability to set the locale by <code>.environment(\.locale, locale)</code> on the views because it won't be respected. As the environment value is available in the <code>View</code> context and <code>Locale.current</code> stays the same across the app. There is no way to get the locale set for the given view and its child views outside of the <code>body</code>.</p><p>To overcome that issue I came up with a solution that allows to override of the locale environment and provide a custom implementation of the localized strings.</p><pre><code><span class="keyword">struct</span> LocalizedText: <span class="type">View</span> {
    <span class="keyword">@Environment</span>(\.<span class="property">locale</span>) <span class="keyword">var</span> locale
    <span class="keyword">let</span> key: <span class="type">String</span>
    <span class="keyword">let</span> localizedString: (<span class="keyword">_</span> languageCode: <span class="type">String</span>?, <span class="keyword">_</span> key: <span class="type">String</span>) -&gt; (<span class="type">String</span>)

    <span class="keyword">var</span> body: <span class="type">Text</span> {
        <span class="keyword">let</span> languageCode = locale.<span class="property">languageCode</span> ?? <span class="type">Locale</span>.<span class="property">current</span>.<span class="property">languageCode</span>
        <span class="keyword">let</span> localizedString = <span class="call">localizedString</span>(languageCode, key)

        <span class="keyword">return</span> <span class="type">Text</span>(localizedString)
    }
}
</code></pre><p><code>LocalizedText</code> view is used to get the <code>locale</code> from the <code>environment</code> as it is only available from the <code>View</code> context. Using <code>localizedString</code> closure, which gets all the information needed to resolve the localized string which is the <code>key</code> and <code>languageCode</code> (if needed the whole <code>Locale</code> object could be passed instead).</p><p>Example of use could look like this:</p><pre><code><span class="keyword">extension</span> <span class="type">L18n</span> {
    <span class="keyword">static func</span> localizedString(<span class="keyword">_</span> key: <span class="type">String</span>, languageCode: <span class="type">String</span>) -&gt; <span class="type">String</span> {
        <span class="type">NSLocalizedString</span>(
            key,
            tableName: <span class="string">""</span>,
            bundle: <span class="call">resolveBundle</span>(for : languageCode),
            value: <span class="string">"**</span>\(key)<span class="string">**"</span>,
            comment: <span class="string">""</span>
        )
    }

    <span class="keyword">static func</span> localizedText(<span class="keyword">_</span> key: <span class="type">String</span>) -&gt; <span class="keyword">some</span> <span class="type">View</span> {
        <span class="type">LocalizedText</span>(key: key, localizedString: { languageCode, key <span class="keyword">in</span>
            <span class="call">localizedString</span>(key, languageCode: languageCode)
        })
    }
}
</code></pre><pre><code><span class="keyword">struct</span> SomeView: <span class="type">View</span> {
    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
        <span class="type">L18n</span>.<span class="call">localizedText</span>(<span class="string">"Hello"</span>)
    }
}

<span class="keyword">struct</span> SomeView_Preview: <span class="type">PreviewProvider</span> {
    <span class="keyword">static var</span> previews: <span class="keyword">some</span> <span class="type">View</span> {
        <span class="type">SomeView</span>()
            .<span class="call">environment</span>(\.<span class="property">locale</span>, <span class="type">Locale</span>(identifier: <span class="string">"pl"</span>))
    }
}
</code></pre><p>This way we keep the best of both worlds. Especially do not lose the ability of SwiftUI <a href="https://developer.apple.com/documentation/swiftui/environmentvalues"><code>EnvironmentValues</code></a> and still provide a custom implementation for the localized strings handling. We can keep <code>*.lproj</code> and <code>*.strings</code> files in a separate framework, and provide a custom implementation of the localized strings by e.g. having a complicated fallback translations business logic in case the key is missing for the asked language.</p>]]></content:encoded></item><item><guid isPermaLink="true">https://nonameplum.github.io/posts/Superview%20observer</guid><title>How to observe the moment when the view is added to the super view.</title><description>Superview observer</description><link>https://nonameplum.github.io/posts/Superview%20observer</link><pubDate>Sun, 10 Apr 2022 14:54:00 +0000</pubDate><content:encoded><![CDATA[<h1>How to observe the moment when the view is added to the super view.</h1><p>Sometimes it is useful to know when the view has added a subview to another view. For example, it is required before we can activate the autolayout constraints.</p><p>This can be achieved by observing the moment when the view is moved to the window, as in the case of the <code>UIView</code> it happens at the time when is added as a subview.</p><p>To do that we can create <code>UIView</code> subclass that will override method <a href="https://developer.apple.com/documentation/uikit/uiview/1622527-didmovetowindow">didMoveToWindow()</a>.</p><pre><code><span class="keyword">public final class</span> SuperviewObserver: <span class="type">UIView</span> {
    <span class="keyword">private let</span> observer: (<span class="keyword">_</span> this: <span class="type">UIView</span>, <span class="keyword">_</span> superview: <span class="type">UIView</span>) -&gt; <span class="type">Void</span>

    <span class="keyword">public init</span>(observer: <span class="keyword">@escaping</span> (<span class="keyword">_</span> this: <span class="type">UIView</span>, <span class="keyword">_</span> superview: <span class="type">UIView</span>) -&gt; <span class="type">Void</span>) {
        <span class="keyword">self</span>.<span class="property">observer</span> = observer
        <span class="keyword">super</span>.<span class="keyword">init</span>(frame: .<span class="dotAccess">zero</span>)
    }

    <span class="keyword">@available</span>(*, unavailable)
    <span class="keyword">required init</span>?(coder: <span class="type">NSCoder</span>) {
        <span class="call">fatalError</span>(<span class="string">"init(coder:) has not been implemented"</span>)
    }

    <span class="keyword">public override func</span> didMoveToWindow() {
        <span class="keyword">super</span>.<span class="call">didMoveToWindow</span>()
        <span class="keyword">guard let</span> superview = superview?.<span class="property">superview</span> <span class="keyword">else</span> { <span class="keyword">return</span> }

        <span class="call">observer</span>(<span class="keyword">self</span>, superview)
        <span class="call">removeFromSuperview</span>()
    }
}
</code></pre><p>We can make this custom subclass more convenient to use, by creating an extension method:</p><pre><code><span class="keyword">public protocol</span> UIViewProtocol {}
<span class="keyword">extension</span> <span class="type">UIView</span>: <span class="type">UIViewProtocol</span> {}

<span class="keyword">public extension</span> <span class="type">UIViewProtocol</span> <span class="keyword">where</span> <span class="type">Self</span>: <span class="type">UIView</span> {
    <span class="keyword">func</span> onDidMoveToSubview(closure: <span class="keyword">@escaping</span> (<span class="keyword">_</span> view: <span class="type">Self</span>, <span class="keyword">_</span> superview: <span class="type">UIView</span>) -&gt; <span class="type">Void</span>) {
        <span class="call">addSubview</span>(
            <span class="type">SuperviewObserver</span> { [<span class="keyword">unowned self</span>] this, superview <span class="keyword">in</span>
                <span class="call">closure</span>(<span class="keyword">self</span>, superview)
            }
        )
    }
}
</code></pre><p><code>UIViewProtocol</code> protocol is added, to be able to get the exact type of the <code>UIView</code>.</p><pre><code><span class="keyword">let</span> superview = <span class="type">UIView</span>()
<span class="keyword">let</span> view = <span class="type">CustomSubclass</span>()
view.<span class="call">onDidMoveToSubview</span> { this, superview <span class="keyword">in</span> 
    <span class="type">NSLayoutConstraint</span>.<span class="call">activate</span>([
        this.<span class="property">leadingAnchor</span>.<span class="call">constraint</span>(equalTo: superview.<span class="property">leadingAnchor</span>) <span class="comment">// this is type of CustomSubclass</span>
        ...
    ])
}

superview.<span class="call">addSubview</span>(view)
</code></pre>]]></content:encoded></item><item><guid isPermaLink="true">https://nonameplum.github.io/posts/Setup%20a%20linkage%20and%20package%20for%20each%20dependency%20separately%20with%20CocoaPods</guid><title>How to set up the linkage and package method separately for each dependency with CocoaPods</title><description>Setup a linkage and package for each dependency separately with CocoaPods</description><link>https://nonameplum.github.io/posts/Setup%20a%20linkage%20and%20package%20for%20each%20dependency%20separately%20with%20CocoaPods</link><pubDate>Mon, 28 Feb 2022 10:48:00 +0000</pubDate><content:encoded><![CDATA[<h1>How to set up the linkage and package method separately for each dependency with CocoaPods</h1><p>CocoaPods doesn't allow the setup of the linkage and package method separately for each dependency. It is possible to setup the linkage method but only for the whole target like:</p><pre><code>target :<span class="type">DynamicTarget</span> <span class="keyword">do</span>
    use_frameworks! :linkage =&gt; :<span class="keyword">dynamic</span>
    
    pod '<span class="type">DynamicPod</span>' # <span class="type">This</span> will be linked dynamically
end

target :<span class="type">StaticTarget</span> <span class="keyword">do</span>
    use_frameworks! :linkage =&gt; :<span class="keyword">static</span>

    pod '<span class="type">StaticPod</span>' # <span class="type">This</span> will be linked statically
end
</code></pre><p>Microsoft iOS team made a plugin to allow it: https://github.com/microsoft/cocoapods-pod-linkage</p><p>If you don't what to use the plugin you can still make it work on your own by using the CocoaPods <code>pre_install</code> hook.</p><pre><code>pre_install <span class="keyword">do</span> |installer|
  installer.<span class="property">pod_targets</span>.<span class="property">each</span> <span class="keyword">do</span> |pod|
    <span class="keyword">if</span> pod.<span class="property">name</span> == <span class="string">"Podname"</span>
      def pod.<span class="property">build_type</span>
        <span class="type">Pod</span>::<span class="type">BuildType</span>.<span class="call">new</span>(:linkage =&gt; :<span class="keyword">dynamic</span>, :packaging =&gt; :framework)
      end
    end
  end
end
</code></pre><p>All possible <code>BuildType</code>s are defined here https://github.com/CocoaPods/Core/blob/master/lib/cocoapods-core/build_type.rb.</p>]]></content:encoded></item><item><guid isPermaLink="true">https://nonameplum.github.io/posts/Unit%20Test%20Template%20for%20Xcode%20Playground</guid><title>How to add custom template useful for the Unit Test directly in the Xcode Playgroud</title><description>Unit Test Template for Xcode Playground</description><link>https://nonameplum.github.io/posts/Unit%20Test%20Template%20for%20Xcode%20Playground</link><pubDate>Sun, 5 Sep 2021 11:56:00 +0000</pubDate><content:encoded><![CDATA[<h1>How to add custom template useful for the Unit Test directly in the Xcode Playgroud</h1><p>Custom template that allows to write unit tests directly in the Xcode Playgroud with nice error/success messages: <img src="https://user-images.githubusercontent.com/1753816/132126336-c6ac9414-e57d-4394-a3cb-65d0fac46d79.png" alt="Screenshot 2021-09-05 at 14 11 30"/> <img src="https://user-images.githubusercontent.com/1753816/132126405-a568738a-75dd-4e79-9d65-5e8ef0092baf.png" alt="Screenshot 2021-09-05 at 14 14 28"/></p><h2>Installation</h2><h3>Manual</h3><p>Download and unzip <a href="https://github.com/nonameplum/blog/files/7111526/Unit.Test.xctemplate.zip">Unit Test.xctemplate.zip</a> Copy <code>Unit Test.xctemplate</code> directory to <code>~/Library/Developer/Xcode/Templates/File Templates/Playground/</code> (create the folder if doesn't exits yet)</p><h3>Bash script</h3><pre><code>mkdir ./<span class="type">Unit_Test</span>.<span class="property">xctemplate</span>
curl --show-error --location https://github.<span class="property">com</span>/nonameplum/blog/files/<span class="number">7111526</span>/<span class="type">Unit</span>.<span class="type">Test</span>.<span class="property">xctemplate</span>.<span class="property">zip</span> | tar -xf - -<span class="type">C</span> ./<span class="type">Unit_Test</span>.<span class="property">xctemplate</span>
cd ./<span class="type">Unit_Test</span>.<span class="property">xctemplate</span>
mkdir -p ~/<span class="type">Library</span>/<span class="type">Developer</span>/<span class="type">Xcode</span>/<span class="type">Templates</span>/<span class="type">File</span>\ <span class="type">Templates</span>/<span class="type">Playground</span>
cp -<span class="type">R</span> <span class="string">"./Unit Test.xctemplate"</span> ~/<span class="type">Library</span>/<span class="type">Developer</span>/<span class="type">Xcode</span>/<span class="type">Templates</span>/<span class="type">File</span>\ <span class="type">Templates</span>/<span class="type">Playground</span>
</code></pre><p>Once you restart Xcode you should be able to see the <em>Unit Test</em> template for a new playgroud: <img src="https://user-images.githubusercontent.com/1753816/132126129-744ff2e0-228d-4f24-b73d-8be984ad0abf.png" alt="Screenshot 2021-09-05 at 14 05 01"/></p>]]></content:encoded></item><item><guid isPermaLink="true">https://nonameplum.github.io/posts/ESPHome%20custom%20component%20vs%20component%20(contribution)%20development</guid><title>Difference of development between custom component and full-fledged component for ESPHome</title><description>ESPHome custom component vs component (contribution) development</description><link>https://nonameplum.github.io/posts/ESPHome%20custom%20component%20vs%20component%20(contribution)%20development</link><pubDate>Sun, 5 Sep 2021 11:12:00 +0000</pubDate><content:encoded><![CDATA[<h1>Difference of development between custom component and full-fledged component for ESPHome</h1><p>There are two approaches that can be used to develop a custom component for <a href="https://esphome.io/">ESPHome</a>: 1. A simplified version described in the ESPHome documentation (<a href="https://esphome.io/components/sensor/custom.html">Custom Sensor Compoent</a> and <a href="https://esphome.io/custom/custom_component.html">Generic Custom Component</a>) 2. Native - "full-fledged" component that you can find e.g. <a href="https://github.com/esphome/esphome/tree/dev/esphome/components">ESPHome Build-in Components</a> and its creation is described in the <a href="https://esphome.io/guides/contributing.html">Contribution Guide</a></p><p>For better communication to distinguish components, I will call the former <em>Simple</em> and the latter <em>Native</em>.</p><p>The main difference between the two is that <em>Native</em> implementation provides better reusability, as you can use <a href="https://esphome.io/components/external_components.html"><code>external_components</code></a> feature to point to the local or remote (github) location in your <code>.yaml</code> device configuration to simply use some additional components except the build-in into ESPHome. Additionally <em>Native</em> component has more advantages over the component configuration validation thanks to Python and configuration schemes.</p><p>The <em>Simple</em> component development is quite well described in the ESPHome documentation. In a nutshell, it just requires creating the <code>.h</code> + optionally <code>.cpp</code> file with the C++ (Arduino) component implementation and then the <code>yaml</code> file that registers the component so it can be used as any other ESPHome component. All that is clearly explained in the above documentation references.</p><p>In the case of the <em>Native</em> component development, this gets more tricky. The contribution guide sheds a bit of light on how to start but without many details. The most tricky part is how to properly write the <code>__init__</code> and/or<code>sensor.py</code> which defines the component, validation, and C++ code generation (more details in the contribution guide). Most of the time it requires checking other component's implementations and based on that conclude what is actually needed. It's not that hard but requires a bit of Python knowledge. The C++ part is not that much different than the <em>Simple</em> component implementation. If you already have <em>Simple</em> implementation it can be copy/pasted, add <code>namespace esphome</code>, another inner for the component, and you are good to go.</p><p>If you would like to understand better the difference between the <em>Simple</em> and <em>Native</em> component implementation take a look at my <a href="https://github.com/nonameplum/esphome_devices">repository</a>. I implemented the same sensor using both approaches. You can find the <em>Simple</em> component implementation in <a href="https://github.com/nonameplum/esphome_devices/tree/main/custom_components/mq9">custom_components/mq9</a> and <em>Native</em> in <a href="https://github.com/nonameplum/esphome_devices/tree/main/components/mq">components/mq</a>. Also, the example of how to use it is defined in <a href="https://github.com/nonameplum/esphome_devices/blob/main/mq9_test.yaml">mq9_test.yaml</a></p><p>The <em>Native</em> component is loaded thanks to the <code>external_components</code> definition in <a href="https://github.com/nonameplum/esphome_devices/blob/main/common/config_base.yaml">config_base.yaml</a>.</p><p>To switch between the <em>Native</em> and <em>Simple</em> component usage uncomment the line that defines <code>mq9_base</code> in the <a href="https://github.com/nonameplum/esphome_devices/blob/41d024326db55ef2ee7b357bd58dabdbc18f53c1/mq9_test.yaml#L18">mq9_test.yaml</a>.</p>]]></content:encoded></item><item><guid isPermaLink="true">https://nonameplum.github.io/posts/Helper%20method%20to%20execute%20an%20action%20on%20viewDidLoad%20of%20a%20UIViewController</guid><title>How to execute an action on viewDidLoad of an UIViewController</title><description>Helper method to execute an action on viewDidLoad of a UIViewController</description><link>https://nonameplum.github.io/posts/Helper%20method%20to%20execute%20an%20action%20on%20viewDidLoad%20of%20a%20UIViewController</link><pubDate>Sun, 4 Apr 2021 20:27:00 +0000</pubDate><content:encoded><![CDATA[<h1>How to execute an action on viewDidLoad of an UIViewController</h1><pre><code><span class="keyword">private var</span> onViewLoadContext: <span class="type">UInt8</span> = <span class="number">0</span>

<span class="keyword">public protocol</span> UIViewControllerOnViewLoadProtocol { }

<span class="keyword">extension</span> <span class="type">UIViewController</span>: <span class="type">UIViewControllerOnViewLoadProtocol</span> { }

<span class="keyword">private class</span> OnViewControllerViewLoadObserver&lt;T&gt;: <span class="type">NSObject</span> {
    <span class="keyword">private var</span> handlers: [(<span class="type">T</span>) -&gt; <span class="type">Void</span>]
    <span class="keyword">var</span> token: <span class="type">NSKeyValueObservation</span>?

    <span class="keyword">init</span> (<span class="keyword">_</span> handler: <span class="keyword">@escaping</span> (<span class="type">T</span>) -&gt; <span class="type">Void</span>) {
        <span class="keyword">self</span>.<span class="property">handlers</span> = [handler]
    }

    <span class="keyword">func</span> invoke(<span class="keyword">_</span> value: <span class="type">T</span>) {
        <span class="keyword">self</span>.<span class="property">handlers</span>.<span class="call">forEach</span> { handler <span class="keyword">in</span>
            <span class="call">handler</span>(value)
        }
    }

    <span class="keyword">func</span> add(handler: <span class="keyword">@escaping</span> (<span class="type">T</span>) -&gt; <span class="type">Void</span>) {
        <span class="keyword">self</span>.<span class="property">handlers</span>.<span class="call">append</span>(handler)
    }
}

<span class="keyword">public extension</span> <span class="type">UIViewControllerOnViewLoadProtocol</span> <span class="keyword">where</span> <span class="type">Self</span>: <span class="type">UIViewController</span> {
    <span class="comment">/// Add handler when view controller's view is set by the framework
    ///
    /// - Attention: Be aware of memory leak that can be caused if any reference holded by `self` is used
    /// inside the handler callback. For that purpose use the instance passed in the handler parameter.
    ///
    /// - Parameters:
    ///     - handler: Callback that will be called when UIKit will set view controller's view.
    ///     Instance passed in the handler parameter is optional because is weakified.
    ///
    /// - Tag: addOnViewLoad</span>
    <span class="keyword">func</span> addOnViewLoad(handler: <span class="keyword">@escaping</span> (<span class="type">Self</span>?) -&gt; <span class="type">Void</span>) {
        <span class="keyword">let</span> observer: <span class="type">OnViewControllerViewLoadObserver</span>&lt;<span class="type">Self</span>?&gt;
        <span class="keyword">if let</span> existingObserver = <span class="call">objc_getAssociatedObject</span>(<span class="keyword">self</span>, &amp;onViewLoadContext) <span class="keyword">as</span>? <span class="type">OnViewControllerViewLoadObserver</span>&lt;<span class="type">Self</span>?&gt; {
            observer = existingObserver
            observer.<span class="call">add</span>(handler: handler)
        } <span class="keyword">else</span> {
            observer = <span class="type">OnViewControllerViewLoadObserver</span>(handler)
            <span class="call">objc_setAssociatedObject</span>(
                <span class="keyword">self</span>,
                &amp;onViewLoadContext,
                observer,
                objc_AssociationPolicy.<span class="type">OBJC_ASSOCIATION_RETAIN_NONATOMIC</span>
            )

            observer.<span class="property">token</span> = <span class="keyword">self</span>.<span class="call">observe</span>(\.<span class="property">view</span>) { [<span class="keyword">weak</span> observer, weak <span class="keyword">self</span>] (<span class="keyword">_</span>, <span class="keyword">_</span>) <span class="keyword">in</span>
                observer?.<span class="call">invoke</span>(<span class="keyword">self</span>)
            }
        }
    }

    <span class="comment">/// Remove a handler added by [addOnViewLoad](x-source-tag://addOnViewLoad)</span>
    <span class="keyword">func</span> removeOnViewLoad() {
        <span class="call">objc_setAssociatedObject</span>(
            <span class="keyword">self</span>,
            &amp;onViewLoadContext,
            <span class="keyword">nil</span>,
            objc_AssociationPolicy.<span class="type">OBJC_ASSOCIATION_RETAIN_NONATOMIC</span>
        )
    }
}
</code></pre>]]></content:encoded></item><item><guid isPermaLink="true">https://nonameplum.github.io/posts/How%20to%20calculate%20time%20needed%20to%20animate%20by%20a%20given%20length%20according%20to%20the%20animation%20timing%20function</guid><title>How to calculate a duration that is needed to animate a view from position A to position B with a given timing function</title><description>How to calculate time needed to animate by a given length according to the animation timing function</description><link>https://nonameplum.github.io/posts/How%20to%20calculate%20time%20needed%20to%20animate%20by%20a%20given%20length%20according%20to%20the%20animation%20timing%20function</link><pubDate>Sat, 20 Feb 2021 18:08:00 +0000</pubDate><content:encoded><![CDATA[<h1>How to calculate a duration that is needed to animate a view from position A to position B with a given timing function</h1><p>A long time ago I had a problem to solve that I needed to know the exact time that will take to animate a view by x which might be in the middle of the desired position giving into account the timing function that the animation uses.</p><p>Here it is, an objective-c category:</p><pre><code><span class="comment">//  CAMediaTimingFunction+Duration.h</span>
#import &lt;<span class="type">QuartzCore</span>/<span class="type">QuartzCore</span>.<span class="property">h</span>&gt;

<span class="keyword">@interface</span> <span class="type">CAMediaTimingFunction</span> (<span class="type">Duration</span>)

- (<span class="type">NSTimeInterval</span>)timeNeededToMoveByY:(<span class="type">CGFloat</span>)yMove totalYMove:(<span class="type">CGFloat</span>)totalYMove duration:(<span class="type">NSTimeInterval</span>)duration;

<span class="keyword">@end</span>

#import <span class="string">"CAMediaTimingFunction+Duration.h"</span>

<span class="keyword">@implementation</span> <span class="type">CAMediaTimingFunction</span> (<span class="type">Duration</span>)

- (<span class="type">NSTimeInterval</span>)timeNeededToMoveBy:(<span class="type">CGFloat</span>)move totalMove:(<span class="type">CGFloat</span>)totalMove duration:(<span class="type">NSTimeInterval</span>)<span class="call">duration</span> {
    <span class="comment">// Using reference animation calculate needed time according to used timing function</span>
    <span class="type">CGFloat</span> normalizedMove = move/totalMove;

    <span class="comment">// View only just for calculation</span>
    <span class="type">UIView</span> *view = [[<span class="type">UIView</span> alloc] initWithFrame:<span class="type">CGRectMake</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>)];
    <span class="type">CALayer</span> *referenceLayer = view.<span class="property">layer</span>;
    referenceLayer.<span class="property">hidden</span> = <span class="type">YES</span>;
    referenceLayer.<span class="property">speed</span> = <span class="number">0.0</span>;
    [[<span class="type">UIApplication</span> sharedApplication].keyWindow addSubview:view];

    <span class="comment">// Reference animation to calculate time</span>
    <span class="type">CABasicAnimation</span> *basicAnimation =  [<span class="type">CABasicAnimation</span> animationWithKeyPath:<span class="string">@"frame"];</span>
    basicAnimation.<span class="property">duration</span> = <span class="number">1.0</span>;
    basicAnimation.<span class="property">timingFunction</span> = <span class="keyword">self</span>;
    basicAnimation.<span class="property">fromValue</span> = [<span class="type">NSValue</span> valueWithCGRect:<span class="type">CGRectMake</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>)];
    basicAnimation.<span class="property">toValue</span> = [<span class="type">NSValue</span> valueWithCGRect:<span class="type">CGRectMake</span>(<span class="number">100</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>)];

    [view.<span class="property">layer</span> addAnimation:basicAnimation forKey:<span class="string">@"evaluatorAnimation"];</span>

    <span class="comment">// Force to run run-loop to get the presentation layer</span>
    [[<span class="type">NSRunLoop</span> mainRunLoop] runUntilDate:[<span class="type">NSDate</span> date]];

    <span class="type">NSUInteger</span> n = <span class="number">0</span>;
    <span class="type">CGFloat</span> a = <span class="number">0.0</span>;
    <span class="type">CGFloat</span> b = <span class="number">1.0</span>;
    <span class="type">CGFloat</span> tolerance = <span class="number">0.005</span>;
    <span class="type">CGFloat</span> move = <span class="number">0.0</span>;
    <span class="type">CGFloat</span> middle = <span class="number">0.0</span>;

    <span class="comment">// Biselection algorithm</span>
    <span class="keyword">while</span> (n &lt; <span class="number">1000</span>) {
        middle = (a + b)/<span class="number">2</span>;
        referenceLayer.<span class="property">timeOffset</span> = middle;
        <span class="comment">// Refresh animation to get updated presentation layer</span>
        [[<span class="type">NSRunLoop</span> mainRunLoop] runUntilDate:[<span class="type">NSDate</span> date]];
        move = referenceLayer.<span class="property">presentationLayer</span>.<span class="property">position</span>.<span class="property">x</span> / <span class="number">100</span>;

        <span class="keyword">if</span> ((move - tolerance) &lt;= normalizedMove &amp;&amp; normalizedMove &lt;= (move + tolerance))
            <span class="keyword">break</span>;

        n += <span class="number">1</span>;
        <span class="keyword">if</span> (normalizedMove &lt; move)
            b = middle;
        <span class="keyword">else</span>
            a = middle;
    }

    [view removeFromSuperview];
    <span class="keyword">return</span> middle * duration;
}

<span class="keyword">@end</span>
</code></pre>]]></content:encoded></item><item><guid isPermaLink="true">https://nonameplum.github.io/posts/iOS%20crash%20symbolication%20script</guid><title>A script to symbolicate crash log and verify if the crash log file matches the build UUID</title><description>iOS crash symbolication script</description><link>https://nonameplum.github.io/posts/iOS%20crash%20symbolication%20script</link><pubDate>Sat, 20 Feb 2021 16:38:00 +0000</pubDate><content:encoded><![CDATA[<h1>A script to symbolicate crash log and verify if the crash log file matches the build UUID</h1><p>To get the best symbolication result, or event to get a proper symbolication of a crash log, the appropriate <code>dSYM</code> and application build is required. The <code>symbolicatecrash</code> tool allows to symbolicate a crash log that doesn't exactly match the build and <code>dSYM</code> that you would like to use. This script besides the symbolication, it also checks if the crash log UUID matches the build UUID. Just run this script on a folder with your <code>.ipa</code>, the corresponding <code>.dSYM</code>, and (1+) <code>.crash</code> files. Will output symbolicated <code>sym-*.crash</code>es for you.</p><p><a href="https://gist.github.com/nonameplum/484f6a69487f912d89428a9253a14dac/archive/0eec4ccf3822dfc8fdf447b1f08dc0dcc25999a2.zip">Download the script</a></p><pre><code>#!/bin/bash
#
# <span class="type">Fool</span>'n'<span class="type">Lazy</span>-<span class="type">Proof</span> iOS .<span class="dotAccess">crash</span> <span class="type">Symbolication</span>
#
# <span class="type">Just</span> run this script on a folder with your `.ipa`, the corresponding `.dSYM`, 
# and (<span class="number">1</span>+) `.crash` files. <span class="type">Will</span> output symbolicated `sym-*.crash`es <span class="keyword">for</span> you.
#
# <span class="type">Copyright</span> (c) <span class="number">2016</span> <span class="type">Ferran Poveda</span> (<span class="keyword">@fbeeper</span>)
# <span class="type">Provided</span> under <span class="type">MIT License</span> (<span class="type">MIT</span>): http://choosealicense.<span class="property">com</span>/licenses/mit/
#
# <span class="type">Extended</span> by <span class="type">Lukasz Sliwinski</span> to check equality of the build's <span class="type">UUID</span> with the crash logs
#

function <span class="call">checkForRequiredFileOfType</span>() 
{ 
	count=`find $1 -print -quit <span class="number">2</span>&gt; /dev/null | wc -l | awk '{print \$1}'`
	<span class="keyword">if</span> [[ $count &gt; <span class="number">0</span> ]]; then
		echo <span class="string">"Found a $1 file"</span>
	<span class="keyword">else</span>
		echo <span class="string">"Missing a $1 file! Need *.ipa + *.dSYM + *.crash files."</span>
		exit
	fi
}

function <span class="call">checkForRequiredFiles</span>()
{
	checkForRequiredFileOfType <span class="string">"*.ipa"</span>
	checkForRequiredFileOfType <span class="string">"*.dSYM"</span>
	checkForRequiredFileOfType <span class="string">"*.crash"</span>
}

# <span class="type">Define</span> location of symbolicatecrash binary (defaults to <span class="type">Xcode</span> location, but can be defined on params)
symbolicatecrash=${symbolicatecrash:-/<span class="type">Applications</span>/<span class="type">Xcode</span>.<span class="property">app</span>/<span class="type">Contents</span>/<span class="type">SharedFrameworks</span>/<span class="type">DVTFoundation</span>.<span class="property">framework</span>/<span class="type">Versions</span>/<span class="type">A</span>/<span class="type">Resources</span>/symbolicatecrash}

# <span class="type">Let</span>'s make sure you haven't forgotten any file
checkForRequiredFiles

# <span class="type">Extract</span> .<span class="dotAccess">ipa</span> and define <span class="keyword">where</span> the binary <span class="keyword">is</span> (assuming it has the same name)
ipa=`find *.ipa -print -quit`
bsdtar -xf <span class="string">"$ipa"</span> -s'|[^/]*/||'
app=`find *.app -print -quit`
app=<span class="string">"$app$/${app%.*}"</span>

dSYM=`find *.dSYM -print -quit`
uuid=`dwarfdump -u $dSYM | perl -ne 'print $1 <span class="keyword">if</span> /<span class="type">UUID</span>: (.*) \(arm64\)/s' | cut -c <span class="number">1</span>-<span class="number">42</span> | tr -d '-' | awk '{ print <span class="call">tolower</span>($0) }'`

echo <span class="string">""</span>
echo <span class="string">"Build UUDD: $uuid"</span>
echo <span class="string">""</span>

# <span class="type">Symbolicate</span> all .<span class="dotAccess">crash</span> files
export <span class="type">DEVELOPER_DIR</span>=<span class="string">"/Applications/Xcode.app/Contents/Developer"</span>
<span class="keyword">for</span> i <span class="keyword">in</span> *.crash; <span class="keyword">do

	if</span> [[ ! $i == sym* ]]; then # <span class="type">Skips</span> previous output files from this script

		build_name=`grep '{<span class="string">"app_name"</span>:' $i | perl -ne 'print $1 <span class="keyword">if</span> /{<span class="string">"app_name"</span>:<span class="string">"([^"</span>]+)<span class="string">","</span>/s' | awk '{ <span class="call">print</span>($0) }'`

		crashFileUuid=`grep --after-context=<span class="number">1000</span> <span class="string">"Binary Images:"</span> $i | grep <span class="string">"$build_name arm64"</span> | perl -ne 'print $1 <span class="keyword">if</span> /.*&lt;(.*)&gt;/s' | awk '{ <span class="call">print</span>($0) }'`

		<span class="keyword">if</span> [ <span class="string">"$uuid"</span> == <span class="string">"$crashFileUuid"</span> ]; then
			<span class="string">"$symbolicatecrash" "$i" "$app"</span> &gt; <span class="string">"sym-$i"</span>
			echo <span class="string">"✅ Symbolicated $i"</span>
		<span class="keyword">else</span>
			echo <span class="string">"❌ skipped $i (crash UUID [$crashFileUuid] do not match build's UUID: [$uuid]"</span>
		fi

	fi

done
</code></pre>]]></content:encoded></item><item><guid isPermaLink="true">https://nonameplum.github.io/posts/My%20Xcode%20themes</guid><title>Xcode theme (light &amp; dark)</title><description>My Xcode themes</description><link>https://nonameplum.github.io/posts/My%20Xcode%20themes</link><pubDate>Thu, 11 Feb 2021 13:49:00 +0000</pubDate><content:encoded><![CDATA[<h1>Xcode theme (light &amp; dark)</h1><h2>Installation</h2><h3>Manual</h3><p>Download and unzip <a href="https://github.com/nonameplum/blog/files/5965669/Plum_Xcode_Themes.zip">Plum<em>Xcode</em>Themes.zip</a> Copy <code>*.xccolortheme</code> files to <code>~/Library/Developer/Xcode/UserData/FontAndColorThemes/</code> (create the folder if doesn't exits yet)</p><h3>Bash script</h3><pre><code>mkdir ./<span class="type">Plum_Xcode_Themes</span>
curl --show-error --location https://github.<span class="property">com</span>/nonameplum/blog/files/<span class="number">5965669</span>/<span class="type">Plum_Xcode_Themes</span>.<span class="property">zip</span> | tar -xf - -<span class="type">C</span> ./<span class="type">Plum_Xcode_Themes</span>
cd ./<span class="type">Plum_Xcode_Themes</span>
mkdir ~/<span class="type">Library</span>/<span class="type">Developer</span>/<span class="type">Xcode</span>/<span class="type">UserData</span>/<span class="type">FontAndColorThemes</span>/
cp ./*.xccolortheme ~/<span class="type">Library</span>/<span class="type">Developer</span>/<span class="type">Xcode</span>/<span class="type">UserData</span>/<span class="type">FontAndColorThemes</span>/
</code></pre><h2>Light</h2><img src="https://user-images.githubusercontent.com/1753816/107644512-cf508200-6c77-11eb-8a93-4a8715c81bea.png" alt="Screenshot 2021-02-11 at 14 44 27"/><h2>Dark</h2><img src="https://user-images.githubusercontent.com/1753816/107644503-ccee2800-6c77-11eb-88fd-bbeb417544f1.png" alt="Screenshot 2021-02-11 at 14 45 04"/>]]></content:encoded></item><item><guid isPermaLink="true">https://nonameplum.github.io/posts/Thread%20safety%20dispatch_once%20Swifty%20alternative</guid><title>Dispatch once in Swift using a handy trick</title><description>Thread safety dispatch_once Swifty alternative</description><link>https://nonameplum.github.io/posts/Thread%20safety%20dispatch_once%20Swifty%20alternative</link><pubDate>Tue, 9 Feb 2021 22:00:00 +0000</pubDate><content:encoded><![CDATA[<h1>Dispatch once in Swift using a handy trick</h1><p>Switch allows to declare a type inside a function body. This ability could be handy in some situations. I found it useful to run the body of the function only once. For example we use to run only once the body of the function <a href="https://developer.apple.com/documentation/uikit/uiview/1622512-updateconstraints"><code>updateConstraints()</code></a>. In addition to that, if we use <code>static</code> variable in the inner <code>struct</code> Swift gives us thread safety for free. I have created a simple wrapper, that allows to run an action and be sure that it will be run only once, even in the concurrect scenario.</p><pre><code><span class="keyword">struct</span> Once {
    <span class="keyword">func</span> run(action: () -&gt; <span class="type">Void</span>) {
        <span class="keyword">struct</span> RunCheck {
            <span class="keyword">static var</span> didRun = <span class="keyword">false</span>
        }

        <span class="keyword">guard</span> !<span class="type">RunCheck</span>.<span class="property">didRun</span> <span class="keyword">else</span> { <span class="keyword">return</span> }

        <span class="type">RunCheck</span>.<span class="property">didRun</span> = <span class="keyword">true</span>
        action()
    }
}
</code></pre><p>Example of use:</p><pre><code><span class="keyword">let</span> once = <span class="type">Once</span>()

<span class="keyword">var</span> indexes: [<span class="type">Int</span>] = []
<span class="type">DispatchQueue</span>.<span class="call">concurrentPerform</span>(iterations: <span class="number">100</span>, execute: { index <span class="keyword">in</span>
    once.<span class="call">run</span> {
        indexes.<span class="call">append</span>(index)
    }
})

<span class="call">print</span>(indexes) <span class="comment">// It will have only one element</span>
</code></pre>]]></content:encoded></item><item><guid isPermaLink="true">https://nonameplum.github.io/posts/Tagging%20in%20swift%20documentation%20to%20link%20to%20another%20place%20in%20the%20code%20base</guid><title>Tag - Swift documentation markup</title><description>Tagging in swift documentation to link to another place in the code base</description><link>https://nonameplum.github.io/posts/Tagging%20in%20swift%20documentation%20to%20link%20to%20another%20place%20in%20the%20code%20base</link><pubDate>Thu, 4 Feb 2021 07:54:00 +0000</pubDate><content:encoded><![CDATA[<h1>Tag - Swift documentation markup</h1><p><a href="https://developer.apple.com/library/archive/documentation/Xcode/Reference/xcode_markup_formatting_ref/">Swift documentation markup</a> is not clear how to link to other type definition/method/... from the documentation. It can be done using <code>Tag</code> element.</p><pre><code><span class="comment">/// An error
/// - Tag: SomeError</span>
<span class="keyword">enum</span> SomeError: <span class="type">Error</span> {
}

<span class="comment">/// Description
/// - Throws: An error of type [SomeError](x-source-tag://SomeError) might be thrown</span>
<span class="keyword">func</span> doSomething() <span class="keyword">throws</span> {
    <span class="keyword">throw</span> <span class="type">NSError</span>(domain: <span class="string">""</span>, code: <span class="number">1</span>, userInfo: <span class="keyword">nil</span>)
}
</code></pre><p>If you do the quick help (<code>⌥ + click</code>) on the method <code>doSomething</code> the documentation will be presented with the clickable link <code>SomeError</code> that will navigate to the place where the tag is defined.</p><img src="https://user-images.githubusercontent.com/1753816/106861707-66d93200-66c6-11eb-93f5-e3bf106fa9a5.png" alt="Screenshot 2021-02-04 at 08 39 47"/>]]></content:encoded></item><item><guid isPermaLink="true">https://nonameplum.github.io/posts/Custom%20Key%20Binding%20for%20Xcode%20to%20join%20lines</guid><title>How to add join lines shortcut to Xcode</title><description>Custom Key Binding for Xcode to join lines</description><link>https://nonameplum.github.io/posts/Custom%20Key%20Binding%20for%20Xcode%20to%20join%20lines</link><pubDate>Wed, 3 Feb 2021 10:34:00 +0000</pubDate><content:encoded><![CDATA[<h1>How to add join lines shortcut to Xcode</h1><p>Add the section below to the file <code>IDETextKeyBindingSet.plist</code> that might be located at:</p><p><code>/Applications/Xcode.app/Contents/Frameworks/IDEKit.framework/Versions/A/Resources/IDETextKeyBindingSet.plist</code> depending where the Xcode app is placed and named.</p><pre><code>&lt;key&gt;<span class="type">Custom</span>&lt;/key&gt;
&lt;dict&gt;
    &lt;key&gt;<span class="type">Join Lines</span>&lt;/key&gt;
    &lt;string&gt;moveDown:, moveToEndOfText:, moveToBeginningOfText:, deleteToBeginningOfLine:, deleteBackward:&lt;/string&gt;
    &lt;key&gt;<span class="type">Join Lines Backward</span>&lt;/key&gt;
    &lt;string&gt;moveToEndOfText:, moveToBeginningOfText:, deleteToBeginningOfLine:, deleteBackward:&lt;/string&gt;
&lt;/dict&gt;
</code></pre><p><code>Join Lines</code> joins the lines forward, the other one backward.</p><p>After the file is saved, Xcode needs to be restarted to load the new setup. In Xcode settings, the keyboard shorts can be configured: <img src="https://user-images.githubusercontent.com/1753816/106734419-48fec500-6613-11eb-994e-423fc983873e.png" alt="Screenshot 2021-02-03 at 11 30 46"/></p>]]></content:encoded></item><item><guid isPermaLink="true">https://nonameplum.github.io/posts/Observe%20deinitialization</guid><title>An extension to allow observation when an object is deallocated.</title><description>Observe deinitialization</description><link>https://nonameplum.github.io/posts/Observe%20deinitialization</link><pubDate>Thu, 14 Jan 2021 10:46:00 +0000</pubDate><content:encoded><![CDATA[<h1>An extension to allow observation when an object is deallocated.</h1><pre><code><span class="comment">// MARK: Deinit observation</span>
<span class="keyword">extension</span> <span class="type">NSObject</span> {
    <span class="keyword">func</span> onDeinit(execute work: <span class="keyword">@escaping</span> () -&gt; <span class="type">Void</span>) {
        <span class="keyword">let</span> deinitCallback = <span class="type">Self</span>.<span class="call">deinitCallback</span>(forObject: <span class="keyword">self</span>)
        deinitCallback.<span class="property">callbacks</span>.<span class="call">append</span>(work)
    }

    <span class="comment">// MARK: Helpers</span>
    <span class="keyword">private static let</span> key = <span class="type">UnsafeMutablePointer</span>&lt;<span class="type">UInt8</span>&gt;.<span class="call">allocate</span>(capacity: <span class="number">1</span>)

    <span class="keyword">static private func</span> deinitCallback(forObject object: <span class="type">NSObject</span>) -&gt; <span class="type">DeinitCallback</span> {
        <span class="keyword">if let</span> deinitCallback = <span class="call">objc_getAssociatedObject</span>(object, key) <span class="keyword">as</span>? <span class="type">DeinitCallback</span> {
            <span class="keyword">return</span> deinitCallback
        } <span class="keyword">else</span> {
            <span class="keyword">let</span> deinitCallback = <span class="type">DeinitCallback</span>()
            <span class="call">objc_setAssociatedObject</span>(object, key, deinitCallback, .<span class="dotAccess">OBJC_ASSOCIATION_RETAIN_NONATOMIC</span>)
            <span class="keyword">return</span> deinitCallback
        }
    }

    <span class="comment">// MARK: Types</span>
    <span class="keyword">@objc fileprivate class</span> DeinitCallback: <span class="type">NSObject</span> {
        <span class="keyword">var</span> callbacks: [() -&gt; <span class="type">Void</span>] = []

        <span class="keyword">deinit</span> {
            callbacks.<span class="call">forEach</span>({ $0() })
        }
    }
}
</code></pre>]]></content:encoded></item></channel></rss>